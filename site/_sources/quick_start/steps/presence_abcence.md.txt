# Проверка присутствия или отсутствия

Бывает, что тестируемое приложение или его часть работает несинхронно по отношению к выполняющемуся тесту. Так же бывает
необходимо просто дождаться / проверить, что спустя некоторое время что-то появилось или исчезло. 

Ниже приведенные схематичные примеры демонстрируют возможности, которые предоставляет Neptune, для подобных сценариев. 

## Проверка присутствия / появления

```java
import static java.time.Duration.ofSeconds;

public class MyTest {

    // В данном примере выполняется шаг, который
    // возвращает true/false в зависимости от того,
    // присутствует ли или появилось ли нужное значение / состояние
    @Test
    public void myTest() {
        //схематичный вызов контекста, 
        // в рамках которого выполняется шаг
        boolean isPresent = someContext()
            // вызов вычисления присутствия 
            // ожидаемого объекта или состояния 
            .presenceOf(something(/*необходимые параметры*/) //вызов шага 
                //вычисляющего ожидаемый объект / состояние
                /*
                 опциональные параметры вычисляющего шага
                 */
                //Если реализация шага предусматривает
                //время ожидания результата,
                //то вызов этого метода является 
                //указанием, сколько времени ждать
                //наличие или появления нужного 
                // объекта или состояния 
                .timeOut(ofSeconds(5)),
                param1, //в зависимости от контекста / его реализации и того,
                // для чего он используется, у метода presenceOf может быть
                param2  //свой набор обязательных и опциональных параметров
            );
        
        boolean isPresent2 = someContext()
            //То же самое, что и в примере выше.
            //Разница в том, если нужное значение/состояние 
            //не присутствует или не появилось, то будет выброшено исключение 
            .presenceOfOrThrow(something(/*необходимые параметры*/) 
                /*
                опциональные параметры вычисляющего шага
                */
                .timeOut(ofSeconds(5)),
                param1, //в зависимости от контекста / его реализации и того,
                // для чего он используется, у метода presenceOfOrThrow может быть
                param2  //свой набор обязательных и опциональных параметров
            );
    }
}
```

Аргументы-шаги подробно описаны [тут](pattern_steps/get_step/index.md)

## Проверка отсутствия / исчезновения

```java
import static java.time.Duration.ofSeconds;

public class MyTest {

    // В данном примере выполняется шаг, который
    // возвращает true/false в зависимости от того,
    // отсутствует ли или пропало ли значение / состояние
    @Test
    public void myTest() {
        //схематичный вызов контекста, 
        // в рамках которого выполняется шаг
        boolean isAbsent = someContext()
            // вызов вычисления отсутствия объекта или состояния 
            .absenceOf(something(/*необходимые параметры*/) //вызов шага 
                // вычисляющего объект / состояние, 
                // которое должно пропасть
                /*
                 опциональные параметры вычисляющего шага
                 */
                //.timeOut(ofSeconds(5)), <-- игнорируется
                ,
                ofSeconds(10), //время на то, чтобы значение / состояние пропало
                param1, //в зависимости от контекста / его реализации и того,
                // для чего он используется, у метода absenceOf может быть
                param2  //свой набор обязательных и опциональных параметров
            );
        
        boolean isAbsent2 = someContext()
            //То же самое, что и в примере выше.
            //Разница в том, если значение/состояние 
            //присутствует, то будет выброшено исключение 
            .absenceOfOrThrow(something(/*необходимые параметры*/) 
                /*
                опциональные параметры вычисляющего шага
                */
                //.timeOut(ofSeconds(5)), <-- игнорируется
                ,
                ofSeconds(10), //время на то, чтобы значение / состояние пропало
                param1, //в зависимости от контекста / его реализации и того,
                // для чего он используется, у метода absenceOfOrThrow может быть
                param2  //свой набор обязательных и опциональных параметров
            );
    }
}
```
Аргументы-шаги подробно описаны [тут](pattern_steps/get_step/index.md)

## Опциональные параметры шагов

```{eval-rst}
.. include:: ../../shared_docs/steps_return_list_optiotal_parameters_sync.rst
```

```{eval-rst}
.. include:: ../../shared_docs/steps_return_list_optiotal_parameters_async.rst
```

```{eval-rst}
.. include:: ../../shared_docs/steps_return_array_optiotal_parameters_sync.rst
```

```{eval-rst}
.. include:: ../../shared_docs/steps_return_array_optiotal_parameters_async.rst
```

```{eval-rst}
.. include:: ../../shared_docs/steps_return_iterable_item_optiotal_parameters_sync.rst
```

```{eval-rst}
.. include:: ../../shared_docs/steps_return_iterable_item_optiotal_parameters_async.rst
```

```{eval-rst}
.. include:: ../../shared_docs/steps_return_array_item_optiotal_parameters_sync.rst
```

```{eval-rst}
.. include:: ../../shared_docs/steps_return_array_item_optiotal_parameters_async.rst
```

В приведенных выше списках опциональные параметры с номерами игнорируются при вычислении присутствия / отсутствия.
Эти параметры нужны для того, чтобы уточнить или ограничить возвращаемое значение. При вычислении присутствия / отсутствия
важно, что что-то вычисляемое по набору параметров и проверяемое на соответствие по критериям либо присутствует / появляется,
либо отсутствует / исчезает.