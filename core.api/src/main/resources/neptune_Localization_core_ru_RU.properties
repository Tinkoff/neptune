#Values for translation of steps, their parameters, matchers and their descriptions, and attachments are defined here. Format key = value

#============================================ STEPS ============================================ 

######################## core.api.steps.SequentialGetStepSupplier #
#_________________________________Parameters_____________________________________
#Original text = Get:
core.api.steps.SequentialGetStepSupplier.imperative=Получить:
#Original text = Result
core.api.steps.SequentialGetStepSupplier.resultDescription=Результат
#Original text = Not present:
core.api.steps.SequentialGetStepSupplier.errorMessageStartingOnEmptyResult=Не присутствует / не найдено:

######################## core.api.steps.SequentialActionSupplier #
#_________________________________Parameters_____________________________________
#Original text = Perform:
core.api.steps.SequentialActionSupplier.imperative=Выполнить:

######################## core.api.steps.Absence #
#_________________________________Parameters_____________________________________
#Original text = Wait for:
core.api.steps.Absence.imperative=Ожидать:
#Original text = Time of the waiting for absence
core.api.steps.Absence.timeOut=Время ожидания отсутствия/исчезновения
#Original text = Is absent
core.api.steps.Absence.resultDescription=Отсутствует:
#Original text = Still present:
core.api.steps.Absence.errorMessageStartingOnEmptyResult=Все еще присутствует:
#__________________________________ Methods _______________________________________
#Original text = Absence of {toBeAbsent}
core.api.steps.Absence.absence(core.api.steps.SequentialGetStepSupplier<T,?,?,?,?>)=Отсутствие. {toBeAbsent}

######################## core.api.steps.Presence #
#_________________________________Parameters_____________________________________
#Original text = Wait for:
core.api.steps.Presence.imperative=Ожидать:
#Original text = Is present
core.api.steps.Presence.resultDescription=Присутствует:
#__________________________________ Methods _______________________________________
#Original text = Presence of {toBePresent}
core.api.steps.Presence.presence(core.api.steps.SequentialGetStepSupplier<T,?,?,?,?>)=Наличие. {toBePresent}

#============================================ ATTACHMENTS ============================================ 

######################## core.api.event.firing.collections.ArrayCaptor #
#Original text = Resulted array
core.api.event.firing.collections.ArrayCaptor=Полученный массив

######################## core.api.event.firing.collections.CollectionCaptor #
#Original text = Resulted collection
core.api.event.firing.collections.CollectionCaptor=Полученная коллекция

######################## core.api.event.firing.collections.MapCaptor #
#Original text = Resulted map
core.api.event.firing.collections.MapCaptor=Полученный Map<?,?>

#============================================ MATCHERS ============================================ 

######################## core.api.hamcrest.common.all.AllCriteriaMatcher #
#Original text = {allMatchers}
core.api.hamcrest.common.all.AllCriteriaMatcher={allMatchers}

######################## core.api.hamcrest.common.any.AnyMatcher #
#Original text = {orExpression}
core.api.hamcrest.common.any.AnyMatcher={orExpression}

######################## core.api.hamcrest.common.not.NotMatcher #
#Original text = {notExpression}
core.api.hamcrest.common.not.NotMatcher={notExpression}

######################## core.api.hamcrest.common.only.one.OnlyOneMatcher #
#Original text = {onlyOneExpression}
core.api.hamcrest.common.only.one.OnlyOneMatcher={onlyOneExpression}

######################## core.api.hamcrest.iterables.MapEntryMatcher #
#Original text = Key: {key} Value: {value}
core.api.hamcrest.iterables.MapEntryMatcher=Ключ: {key} значение: {value}

######################## core.api.hamcrest.iterables.SetOfObjectsConsistsOfMatcher #
#Original text = in any order: {matchers}
core.api.hamcrest.iterables.SetOfObjectsConsistsOfMatcher=в любом порядке: {matchers}

######################## core.api.hamcrest.iterables.SetOfObjectsConsistsOfMatcher$ArrayConsistsOfMatcherInOrder #
#Original text = in following order: {matchers}
core.api.hamcrest.iterables.SetOfObjectsConsistsOfMatcher$ArrayConsistsOfMatcherInOrder=в следующем порядке: {matchers}

######################## core.api.hamcrest.iterables.SetOfObjectsConsistsOfMatcher$IterableConsistsOfMatcherInOrder #
#Original text = in following order: {matchers}
core.api.hamcrest.iterables.SetOfObjectsConsistsOfMatcher$IterableConsistsOfMatcherInOrder=в следующем порядке: {matchers}

######################## core.api.hamcrest.iterables.SetOfObjectsConsistsOfMatcher$MapConsistsOfMatcherInOrder #
#Original text = in following order: {matchers}
core.api.hamcrest.iterables.SetOfObjectsConsistsOfMatcher$MapConsistsOfMatcherInOrder=в следующем порядке: {matchers}

######################## core.api.hamcrest.iterables.SetOfObjectsEachItemMatcher #
#Original text = each item: {matchers}
core.api.hamcrest.iterables.SetOfObjectsEachItemMatcher=каждый элемент: {matchers}

######################## core.api.hamcrest.iterables.SetOfObjectsEachItemMatcher$MapEachItemMatcher #
#Original text = each entry: {matchers}
core.api.hamcrest.iterables.SetOfObjectsEachItemMatcher$MapEachItemMatcher=каждая запись: {matchers}

######################## core.api.hamcrest.iterables.SetOfObjectsIncludesMatcher #
#Original text = includes in any order: {matchers}
core.api.hamcrest.iterables.SetOfObjectsIncludesMatcher=включает в любом порядке: {matchers}

######################## core.api.hamcrest.iterables.SetOfObjectsIncludesMatcher$ArrayIncludesMatcherInOrder #
#Original text = includes in following order: {matchers}
core.api.hamcrest.iterables.SetOfObjectsIncludesMatcher$ArrayIncludesMatcherInOrder=включает в следующем порядке: {matchers}

######################## core.api.hamcrest.iterables.SetOfObjectsIncludesMatcher$IterableIncludesMatcherInOrder #
#Original text = includes in following order: {matchers}
core.api.hamcrest.iterables.SetOfObjectsIncludesMatcher$IterableIncludesMatcherInOrder=включает в следующем порядке: {matchers}

######################## core.api.hamcrest.iterables.SetOfObjectsIncludesMatcher$MapIncludesMatcherInOrder #
#Original text = includes in following order: {matchers}
core.api.hamcrest.iterables.SetOfObjectsIncludesMatcher$MapIncludesMatcherInOrder=включает в следующем порядке: {matchers}

######################## core.api.hamcrest.iterables.SetOfObjectsItemsMatcher #
#Original text = has item(s): {matchers}. Expected count: {count}
core.api.hamcrest.iterables.SetOfObjectsItemsMatcher=есть элемент(ы): {matchers}. Ожидаемое количество: {count}

######################## core.api.hamcrest.iterables.SetOfObjectsItemsMatcher$MapHasItemsMatcher #
#Original text = has entry(es): {matchers}. Expected count: {count}
core.api.hamcrest.iterables.SetOfObjectsItemsMatcher$MapHasItemsMatcher=есть запись(записи): {matchers}. Ожидаемое количество: {count}

######################## core.api.hamcrest.ofclass.OfClassMatcher #
#Original text = is object of class '{clazz}'
core.api.hamcrest.ofclass.OfClassMatcher=объект класса '{clazz}'

######################## core.api.hamcrest.pojo.PojoGetterReturnsMatcher #
#Original text = Public getter '{getter}' is expected to return a value: {criteria}
core.api.hamcrest.pojo.PojoGetterReturnsMatcher=Публичный метод '{getter}' должен вернуть значение: {criteria}

######################## core.api.hamcrest.resource.locator.HasHostMatcher #
#Original text = Host {matcher}
core.api.hamcrest.resource.locator.HasHostMatcher=хост {matcher}

######################## core.api.hamcrest.resource.locator.HasPathMatcher #
#Original text = Path {matcher}
core.api.hamcrest.resource.locator.HasPathMatcher=путь {matcher}

######################## core.api.hamcrest.resource.locator.HasPortMatcher #
#Original text = Port {matcher}
core.api.hamcrest.resource.locator.HasPortMatcher=порт {matcher}

######################## core.api.hamcrest.resource.locator.HasProtocolMatcher #
#Original text = Protocol {matcher}
core.api.hamcrest.resource.locator.HasProtocolMatcher=протокол {matcher}

######################## core.api.hamcrest.resource.locator.HasQueryParameters #
#Original text = has query parameter {key} {value}
core.api.hamcrest.resource.locator.HasQueryParameters=query-параметр {key} со значением {value}

######################## core.api.hamcrest.resource.locator.HasQueryStringMatcher #
#Original text = Query {matcher}
core.api.hamcrest.resource.locator.HasQueryStringMatcher=query {matcher}

######################## core.api.hamcrest.resource.locator.HasReferenceMatcher #
#Original text = Url reference {matcher}
core.api.hamcrest.resource.locator.HasReferenceMatcher=reference-часть Url {matcher}

######################## core.api.hamcrest.resource.locator.HasSchemeMatcher #
#Original text = Scheme {matcher}
core.api.hamcrest.resource.locator.HasSchemeMatcher=Схема {matcher}

######################## core.api.hamcrest.resource.locator.HasUserInfoMatcher #
#Original text = User info {matcher}
core.api.hamcrest.resource.locator.HasUserInfoMatcher=User info {matcher}

######################## core.api.hamcrest.text.StringContainsWithSeparator #
#Original text = string has substring(s) separated by <'{separator}'>: {toContain}
core.api.hamcrest.text.StringContainsWithSeparator=строка с разделителем <'{separator}'> содержит под-строки: {toContain}

######################## core.api.hamcrest.throwable.ThrowableIsCausedByMatcher$ThrowableIsCausedByMatcherDeep #
#Original text = has root cause that matches '{causeMatcher}'
core.api.hamcrest.throwable.ThrowableIsCausedByMatcher$ThrowableIsCausedByMatcherDeep=исключение-первопричина соответствует '{causeMatcher}'

######################## core.api.hamcrest.throwable.ThrowableIsCausedByMatcher$ThrowableIsCausedByMatcherPrimary #
#Original text = primary cause matches '{causeMatcher}'
core.api.hamcrest.throwable.ThrowableIsCausedByMatcher$ThrowableIsCausedByMatcherPrimary=исключение-причина соответствует '{causeMatcher}'

######################## core.api.hamcrest.throwable.ThrowableMessageMatcher #
#Original text = throwable has message '{messageMatcher}'
core.api.hamcrest.throwable.ThrowableMessageMatcher=сообщение '{messageMatcher}'

#============================================ MISMATCH DESCRIPTIONS ============================================ 

######################## core.api.hamcrest.NullValueMismatch #
#Original text = Null value. All checks were stopped
core.api.hamcrest.NullValueMismatch=Null. Проверка завершена

######################## core.api.hamcrest.ObjectIsNotPresentMismatch #
#Original text = Not present {objectName}: {characteristics}
core.api.hamcrest.ObjectIsNotPresentMismatch=Объект не найден {objectName}: {characteristics}

######################## core.api.hamcrest.PropertyValueMismatch #
#Original text = {property} {mismatch}
core.api.hamcrest.PropertyValueMismatch={property} {mismatch}

######################## core.api.hamcrest.SomethingWentWrongDescriber #
#Original text = Something went wrong. The exception was thrown: {exception}
core.api.hamcrest.SomethingWentWrongDescriber=Что-то пошло не так. Выброшенное исключение: {exception}

######################## core.api.hamcrest.TypeMismatch #
#Original text = Type mismatch. Object of class that equals or extends following types was expected: 
#{expected}
#Class of passed value is `{actual}`. All checks were stopped
core.api.hamcrest.TypeMismatch=Несоответствие типов. Ожидался объект одного из следующих классов: \r\n\
{expected}\r\n\
Класс объекта: `{actual}`. Проверка завершена

######################## core.api.hamcrest.common.DoesNotMatchAnyCriteria #
#Original text = <{value}> doesn't match any of listed criteria
core.api.hamcrest.common.DoesNotMatchAnyCriteria=<{value}> не соответствует ни одному из указанных параметров

######################## core.api.hamcrest.common.only.one.MatchesMoreThanOneCriteria #
#Original text = Value: {value}. Only one of listed criteria was expected to be matched. Checks of following criteria were positive:
# {matchers}
core.api.hamcrest.common.only.one.MatchesMoreThanOneCriteria=Значение: {value}. Ожидалось соответствие только одному из перечисленных критериев. Соответствия:\r\n\
{matchers}

######################## core.api.hamcrest.iterables.descriptions.DifferentSizeMismatch #
#Original text = {actual} items instead of {expected}
core.api.hamcrest.iterables.descriptions.DifferentSizeMismatch={actual} элементов вместо {expected}

######################## core.api.hamcrest.iterables.descriptions.EmptyMismatch #
#Original text = <EMPTY>
core.api.hamcrest.iterables.descriptions.EmptyMismatch=<ПУСТО>

######################## core.api.hamcrest.iterables.descriptions.OutOfItemsOrderMismatch #
#Original text = The item ['{currentCriteria}'] doesn't go after : [{lastSuccessful}; index: {lastSuccessfulIndex}; criteria: '{lastSuccessfulCriteria}']
core.api.hamcrest.iterables.descriptions.OutOfItemsOrderMismatch=Элемент ['{currentCriteria}'] не следует за : [{lastSuccessful}; индекс: {lastSuccessfulIndex}; критерий: '{lastSuccessfulCriteria}']

######################## core.api.hamcrest.pojo.NoSuchMethodMismatch #
#Original text = Class {clazz} has no non-static and public method '{getter}' with empty signature and which returns some value
core.api.hamcrest.pojo.NoSuchMethodMismatch=Класс {clazz} не имеет нестатический и публичный метод '{getter}' с пустой сигнатурой и возвращающий значение

#============================================ MATCHED OBJECTS ============================================ 

######################## core.api.hamcrest.iterables.descriptions.Count #
#Original text = Count
core.api.hamcrest.iterables.descriptions.Count=Количество

######################## core.api.hamcrest.iterables.descriptions.Item #
#Original text = item{indexStr}
core.api.hamcrest.iterables.descriptions.Item=элемент{indexStr}

######################## core.api.hamcrest.iterables.descriptions.Key #
#Original text = Key
core.api.hamcrest.iterables.descriptions.Key=Ключ

######################## core.api.hamcrest.iterables.descriptions.Value #
#Original text = Value
core.api.hamcrest.iterables.descriptions.Value=Значение

######################## core.api.hamcrest.ofclass.ClassOfObject #
#Original text = Class of object
core.api.hamcrest.ofclass.ClassOfObject=Класс объекта

######################## core.api.hamcrest.pojo.ReturnedObject #
#Original text = value returned from '{getter}'
core.api.hamcrest.pojo.ReturnedObject=значение, которое вернул '{getter}'

######################## core.api.hamcrest.resource.locator.QueryParameter #
#Original text = URI/URL query parameter{param}
core.api.hamcrest.resource.locator.QueryParameter=query-параметр URI/URL{param}

######################## core.api.hamcrest.throwable.ThrowableCause #
#Original text = cause of the throwable
core.api.hamcrest.throwable.ThrowableCause=причина исключения

#============================================ PARAMETER WRAPPERS ============================================ 

######################## core.api.steps.selections.SelectionOfItem #
#_________________________________Parameters_____________________________________
#Original text = Index of got item to be returned
core.api.steps.selections.SelectionOfItem.index=Индекс полученного элемента, который следует вернуть

######################## core.api.steps.selections.SelectionOfItems #
#_________________________________Parameters_____________________________________
#Original text = How many got items to return
core.api.steps.selections.SelectionOfItems.size=Сколько полученных элементов вернуть
#Original text = To return got items before/after
core.api.steps.selections.SelectionOfItems.direction=Вернуть полученные элементы до/после
#Original text = Indexes of got items to be returned
core.api.steps.selections.SelectionOfItems.indexes=Индексы полученных элементов, которые следует вернуть

######################## core.api.steps.selections.SelectionOfIterable #
#_________________________________Parameters_____________________________________
#Original text = Return the result when total count of got items is
core.api.steps.selections.SelectionOfIterable.whenCount=Вернуть результат, когда общее количество полученных элементов

#============================================ OTHER ============================================ 

######################## core.api.logical.lexemes.Not #
#Original text = not
core.api.logical.lexemes.Not=НЕ

######################## core.api.logical.lexemes.OnlyOne #
#Original text = xor
core.api.logical.lexemes.OnlyOne=xor

######################## core.api.logical.lexemes.Or #
#Original text = or
core.api.logical.lexemes.Or=или

######################## core.api.steps.SequentialGetStepSupplier$GotItems #
#Original text = Got items
core.api.steps.SequentialGetStepSupplier$GotItems=Полученные элементы

######################## core.api.steps.selections.Direction$After #
#Original text = After item index={indexFrom}
core.api.steps.selections.Direction$After=После элемента с индексом={indexFrom}

######################## core.api.steps.selections.Direction$Before #
#Original text = Before item index={indexFrom}
core.api.steps.selections.Direction$Before=До элемента с индексом={indexFrom}

######################## core.api.steps.selections.ItemsCountCondition$GreaterThan #
#Original text = Greater than
core.api.steps.selections.ItemsCountCondition$GreaterThan=Больше

######################## core.api.steps.selections.ItemsCountCondition$GreaterThanOrEqual #
#Original text = Greater than or equal
core.api.steps.selections.ItemsCountCondition$GreaterThanOrEqual=Больше или равно

######################## core.api.steps.selections.ItemsCountCondition$LesserThan #
#Original text = Lesser than
core.api.steps.selections.ItemsCountCondition$LesserThan=Меньше

######################## core.api.steps.selections.ItemsCountCondition$LesserThanOrEqual #
#Original text = Lesser than or equal
core.api.steps.selections.ItemsCountCondition$LesserThanOrEqual=Меньше или равно

######################## core.api.steps.selections.ItemsCountCondition$WhenCountEquals #
#Original text = equal {count}
core.api.steps.selections.ItemsCountCondition$WhenCountEquals=Равно {count}

######################## core.api.steps.selections.SelectionOfIterable$OnCondition #
#Original text = Return if set of got items matches
core.api.steps.selections.SelectionOfIterable$OnCondition=Вернуть, если набор полученных элементов соответствует

######################## core.api.steps.selections.mismatch.dictionary.CountOfItemsDoesntMatchCondition #
#Original text = Count [{size}] of got items doesnt match '{condition}'
core.api.steps.selections.mismatch.dictionary.CountOfItemsDoesntMatchCondition=Количество [{size}] полученных элементов не соответствует '{condition}'

######################## core.api.steps.selections.mismatch.dictionary.DoesntMatch #
#Original text = Set of got items doesnt match '{condition}'
core.api.steps.selections.mismatch.dictionary.DoesntMatch=Набор полученных элементов не соответствует '{condition}'

######################## core.api.steps.selections.mismatch.dictionary.ImpossibleToSelectResultedItemsFromIterable #
#Original text = It is not possible to select resulted items because:
core.api.steps.selections.mismatch.dictionary.ImpossibleToSelectResultedItemsFromIterable=Невозможно получить результирующие элементы, т.к.:

######################## core.api.steps.selections.mismatch.dictionary.IndexIsOut #
#Original text = Index [{index}] is out of got items count [{count}]
core.api.steps.selections.mismatch.dictionary.IndexIsOut=Индекс [{index}] больше количества полученных элементов [{count}]

######################## core.api.steps.selections.mismatch.dictionary.MaxIndexIsOut #
#Original text = Max index [{index}] is out of got items count [{count}]
core.api.steps.selections.mismatch.dictionary.MaxIndexIsOut=Максимальный индекс [{index}] больше количества полученных элементов [{count}]

######################## core.api.steps.selections.mismatch.dictionary.MinIndexIsOut #
#Original text = Min index [{index}] is out of got items count [{count}]
core.api.steps.selections.mismatch.dictionary.MinIndexIsOut=Минимальный индекс [{index}] больше количества полученных элементов [{count}]

######################## core.api.steps.selections.mismatch.dictionary.WasEmpty #
#Original text = Set of got items was empty
core.api.steps.selections.mismatch.dictionary.WasEmpty=Набор полученных элементов был пуст

######################## core.api.steps.selections.mismatch.dictionary.WasNull #
#Original text = Set of got items was null
core.api.steps.selections.mismatch.dictionary.WasNull=Набор полученных элементов был null