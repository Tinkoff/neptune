#Values for translation of steps, their parameters, matchers and their descriptions, and attachments are defined here. Format key = value

#============================================ STEPS ============================================ 

######################## spring.mock.mvc.CheckMockMvcExpectation #
#Original text = {description}
spring.mock.mvc.CheckMockMvcExpectation={description}
#_________________________________Parameters_____________________________________
#Original text = Check expectation:
spring.mock.mvc.CheckMockMvcExpectation.imperative=Проверить:

######################## spring.mock.mvc.GetArrayFromResponse #
#_________________________________Parameters_____________________________________
#Original text = Criteria of an item of resulted array
spring.mock.mvc.GetArrayFromResponse.criteria=Критерий для каждого элемента, входящего в результат
#__________________________________ Methods _______________________________________
#Original text = {description}
spring.mock.mvc.GetArrayFromResponse.array(java.lang.String,core.api.data.format.DataTransformer,com.fasterxml.jackson.core.type.TypeReference<R>,java.util.function.Function<R,T[]>)={description}
#Original text = {description}
spring.mock.mvc.GetArrayFromResponse.array(java.lang.String,core.api.data.format.DataTransformer,java.lang.Class<R>,java.util.function.Function<R,T[]>)={description}

######################## spring.mock.mvc.GetIterableFromResponse #
#_________________________________Parameters_____________________________________
#Original text = Criteria of an item of resulted iterable
spring.mock.mvc.GetIterableFromResponse.criteria=Критерий для каждого элемента, входящего в результат
#__________________________________ Methods _______________________________________
#Original text = {description}
spring.mock.mvc.GetIterableFromResponse.iterable(java.lang.String,core.api.data.format.DataTransformer,com.fasterxml.jackson.core.type.TypeReference<R>,java.util.function.Function<R,S>)={description}
#Original text = {description}
spring.mock.mvc.GetIterableFromResponse.iterable(java.lang.String,core.api.data.format.DataTransformer,java.lang.Class<R>,java.util.function.Function<R,S>)={description}

######################## spring.mock.mvc.GetMockMvcResponseResultSupplier #
#Original text = Response
spring.mock.mvc.GetMockMvcResponseResultSupplier=Ответ
#_________________________________Parameters_____________________________________
#Original text = Retrieve:
spring.mock.mvc.GetMockMvcResponseResultSupplier.imperative=Получить:
#Original text = Response is not is as expected:
spring.mock.mvc.GetMockMvcResponseResultSupplier.errorMessageStartingOnEmptyResult=Ответ не такой, какой ожидался, или не был получен:

######################## spring.mock.mvc.GetObjectFromResponseBody #
#_________________________________Parameters_____________________________________
#Original text = Result criteria
spring.mock.mvc.GetObjectFromResponseBody.criteria=Критерий результата
#__________________________________ Methods _______________________________________
#Original text = String content of response body
spring.mock.mvc.GetObjectFromResponseBody.contentAsString()=Текстовое содержимое тела ответа
#Original text = {description}
spring.mock.mvc.GetObjectFromResponseBody.objectFromBody(java.lang.String,core.api.data.format.DataTransformer,com.fasterxml.jackson.core.type.TypeReference<R>,java.util.function.Function<R,T>)={description}
#Original text = {description}
spring.mock.mvc.GetObjectFromResponseBody.objectFromBody(java.lang.String,core.api.data.format.DataTransformer,java.lang.Class<R>,java.util.function.Function<R,T>)={description}
#Original text = Response body
spring.mock.mvc.GetObjectFromResponseBody.responseBody(core.api.data.format.DataTransformer,com.fasterxml.jackson.core.type.TypeReference<T>)=Тело ответа
#Original text = Response body
spring.mock.mvc.GetObjectFromResponseBody.responseBody(core.api.data.format.DataTransformer,java.lang.Class<T>)=Тело ответа

######################## spring.mock.mvc.GetObjectFromResponseBodyArray #
#_________________________________Parameters_____________________________________
#Original text = Result criteria
spring.mock.mvc.GetObjectFromResponseBodyArray.criteria=Критерий результата
#__________________________________ Methods _______________________________________
#Original text = {description}
spring.mock.mvc.GetObjectFromResponseBodyArray.objectFromArray(java.lang.String,core.api.data.format.DataTransformer,com.fasterxml.jackson.core.type.TypeReference<R>,java.util.function.Function<R,T[]>)={description}
#Original text = {description}
spring.mock.mvc.GetObjectFromResponseBodyArray.objectFromArray(java.lang.String,core.api.data.format.DataTransformer,java.lang.Class<R>,java.util.function.Function<R,T[]>)={description}

######################## spring.mock.mvc.GetObjectFromResponseBodyIterable #
#_________________________________Parameters_____________________________________
#Original text = Result criteria
spring.mock.mvc.GetObjectFromResponseBodyIterable.criteria=Критерий результата
#__________________________________ Methods _______________________________________
#Original text = {description}
spring.mock.mvc.GetObjectFromResponseBodyIterable.objectFromIterable(java.lang.String,core.api.data.format.DataTransformer,com.fasterxml.jackson.core.type.TypeReference<R>,java.util.function.Function<R,S>)={description}
#Original text = {description}
spring.mock.mvc.GetObjectFromResponseBodyIterable.objectFromIterable(java.lang.String,core.api.data.format.DataTransformer,java.lang.Class<R>,java.util.function.Function<R,S>)={description}

#============================================ ATTACHMENTS ============================================ 

######################## spring.mock.mvc.captors.RequestBodyStringCaptor #
#Original text = Body of the request
spring.mock.mvc.captors.RequestBodyStringCaptor=Тело запроса

######################## spring.mock.mvc.captors.ResponseBodyStringCaptor #
#Original text = Body of the response
spring.mock.mvc.captors.ResponseBodyStringCaptor=Тело ответа

######################## spring.mock.mvc.captors.ResponseStringCaptor #
#Original text = Response
spring.mock.mvc.captors.ResponseStringCaptor=Ответ

#============================================ SPRING RESULT MATCHERS ============================================ 

######################## org.springframework.test.web.servlet.result.MockMvcResultMatchers #
#__________________________________ Methods _______________________________________
#Original text = 
org.springframework.test.web.servlet.result.MockMvcResultMatchers.forwardedUrl(java.lang.String)=отправлено с Url '{0}'
#Original text = 
org.springframework.test.web.servlet.result.MockMvcResultMatchers.forwardedUrlPattern(java.lang.String)=URL, откуда отправлено, соответствует шаблону '{0}'
#Original text = 
org.springframework.test.web.servlet.result.MockMvcResultMatchers.forwardedUrlTemplate(java.lang.String,java.lang.Object[])=URL, откуда отправлено, соответствует шаблону '{0}'. Аргументы {1}
#Original text = 
org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath(java.lang.String,org.hamcrest.Matcher<?superT>)=Jsonpath '{0}', который соответствует '{1}'
#Original text = 
org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath(java.lang.String,org.hamcrest.Matcher<?superT>,java.lang.Class<T>)=Jsonpath '{0}', который соответствует '{1}' и представлен как '{2}'
#Original text = 
org.springframework.test.web.servlet.result.MockMvcResultMatchers.redirectedUrl(java.lang.String)=Url редиректа '{0}'
#Original text = 
org.springframework.test.web.servlet.result.MockMvcResultMatchers.redirectedUrlPattern(java.lang.String)=Url редиректа соответствует шаблону '{0}'
#Original text = 
org.springframework.test.web.servlet.result.MockMvcResultMatchers.redirectedUrlTemplate(java.lang.String,java.lang.Object[])=Url редиректа соответствует шаблону '{0}'. Аргументы {1}
#Original text = 
org.springframework.test.web.servlet.result.MockMvcResultMatchers.content()=Контент
#Original text = 
org.springframework.test.web.servlet.result.MockMvcResultMatchers.cookie()=Куки
#Original text = 
org.springframework.test.web.servlet.result.MockMvcResultMatchers.flash()=Flash-атрибут(ы)
#Original text = 
org.springframework.test.web.servlet.result.MockMvcResultMatchers.handler()=Обработчик (обработчики)
#Original text = 
org.springframework.test.web.servlet.result.MockMvcResultMatchers.header()=Заголовок (заголовки)
#Original text = 
org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath(java.lang.String,java.lang.Object[])=Jsonpath '{0}'. Аргументы {1}
#Original text = 
org.springframework.test.web.servlet.result.MockMvcResultMatchers.model()=Model
#Original text = 
org.springframework.test.web.servlet.result.MockMvcResultMatchers.request()=Запрос
#Original text = 
org.springframework.test.web.servlet.result.MockMvcResultMatchers.status()=Статус
#Original text = 
org.springframework.test.web.servlet.result.MockMvcResultMatchers.view()=View
#Original text = 
org.springframework.test.web.servlet.result.MockMvcResultMatchers.xpath(java.lang.String,java.lang.Object[])=Xpath '{0}'. Аргументы {1}
#Original text = 
org.springframework.test.web.servlet.result.MockMvcResultMatchers.xpath(java.lang.String,java.util.Map<java.lang.String,java.lang.String>,java.lang.Object[])=Xpath '{0}'. Неймспейсы '{1}'. Аргументы {2}

######################## org.springframework.test.web.servlet.result.ContentResultMatchers #
#__________________________________ Methods _______________________________________
#Original text = 
org.springframework.test.web.servlet.result.ContentResultMatchers.bytes(byte[])=Соответствует массиву байтов {0}
#Original text = 
org.springframework.test.web.servlet.result.ContentResultMatchers.contentType(java.lang.String)=Тип контента {0}
#Original text = 
org.springframework.test.web.servlet.result.ContentResultMatchers.contentType(org.springframework.http.MediaType)=Тип контента {0}
#Original text = 
org.springframework.test.web.servlet.result.ContentResultMatchers.contentTypeCompatibleWith(java.lang.String)=Тип контента совместим с {0}
#Original text = 
org.springframework.test.web.servlet.result.ContentResultMatchers.contentTypeCompatibleWith(org.springframework.http.MediaType)=Тип контента совместим с {0}
#Original text = 
org.springframework.test.web.servlet.result.ContentResultMatchers.encoding(java.lang.String)=Кодировка {0}
#Original text = 
org.springframework.test.web.servlet.result.ContentResultMatchers.json(java.lang.String)=Json '{0}'
#Original text = 
org.springframework.test.web.servlet.result.ContentResultMatchers.json(java.lang.String,boolean)=Json '{0}'. Строгая проверка='{1}'
#Original text = 
org.springframework.test.web.servlet.result.ContentResultMatchers.node(org.hamcrest.Matcher<?superorg.w3c.dom.Node>)=W3 нода которая соответствует '{0}'
#Original text = 
org.springframework.test.web.servlet.result.ContentResultMatchers.source(org.hamcrest.Matcher<?superjavax.xml.transform.Source>)=DOM source который соответствует '{0}'
#Original text = 
org.springframework.test.web.servlet.result.ContentResultMatchers.string(java.lang.String)=Строка '{0}'
#Original text = 
org.springframework.test.web.servlet.result.ContentResultMatchers.string(org.hamcrest.Matcher<?superjava.lang.String>)=Строка которая соответствует '{0}'
#Original text = 
org.springframework.test.web.servlet.result.ContentResultMatchers.xml(java.lang.String)=xml '{0}'

######################## org.springframework.test.web.servlet.result.CookieResultMatchers #
#__________________________________ Methods _______________________________________
#Original text = 
org.springframework.test.web.servlet.result.CookieResultMatchers.comment(java.lang.String,java.lang.String)='{0}'. Коммент '{1}'
#Original text = 
org.springframework.test.web.servlet.result.CookieResultMatchers.comment(java.lang.String,org.hamcrest.Matcher<?superjava.lang.String>)='{0}'. Коммент соответствует '{1}'
#Original text = 
org.springframework.test.web.servlet.result.CookieResultMatchers.doesNotExist(java.lang.String)='{0}'. Не существует
#Original text = 
org.springframework.test.web.servlet.result.CookieResultMatchers.domain(java.lang.String,java.lang.String)='{0}'. Домен '{1}'
#Original text = 
org.springframework.test.web.servlet.result.CookieResultMatchers.domain(java.lang.String,org.hamcrest.Matcher<?superjava.lang.String>)='{0}'. Домен соответствует '{1}'
#Original text = 
org.springframework.test.web.servlet.result.CookieResultMatchers.exists(java.lang.String)='{0}'. Существует
#Original text = 
org.springframework.test.web.servlet.result.CookieResultMatchers.httpOnly(java.lang.String,boolean)='{0}'. Http only=='{1}'
#Original text = 
org.springframework.test.web.servlet.result.CookieResultMatchers.maxAge(java.lang.String,int)='{0}'. Срок '{1}'
#Original text = 
org.springframework.test.web.servlet.result.CookieResultMatchers.maxAge(java.lang.String,org.hamcrest.Matcher<?superjava.lang.Integer>)='{0}'. Срок соответствует '{1}'
#Original text = 
org.springframework.test.web.servlet.result.CookieResultMatchers.path(java.lang.String,java.lang.String)='{0}'. Path=='{1}'
#Original text = 
org.springframework.test.web.servlet.result.CookieResultMatchers.path(java.lang.String,org.hamcrest.Matcher<?superjava.lang.String>)='{0}'. Path соответствует '{1}'
#Original text = 
org.springframework.test.web.servlet.result.CookieResultMatchers.secure(java.lang.String,boolean)='{0}'. Secure=='{1}'
#Original text = 
org.springframework.test.web.servlet.result.CookieResultMatchers.value(java.lang.String,java.lang.String)='{0}'. Значение '{1}'
#Original text = 
org.springframework.test.web.servlet.result.CookieResultMatchers.value(java.lang.String,org.hamcrest.Matcher<?superjava.lang.String>)='{0}'. Значение соответствует '{1}'
#Original text = 
org.springframework.test.web.servlet.result.CookieResultMatchers.version(java.lang.String,int)='{0}'. Версия '{1}'
#Original text = 
org.springframework.test.web.servlet.result.CookieResultMatchers.version(java.lang.String,org.hamcrest.Matcher<?superjava.lang.Integer>)='{0}'. Версия соответствует '{1}'

######################## org.springframework.test.web.servlet.result.FlashAttributeResultMatchers #
#__________________________________ Methods _______________________________________
#Original text = 
org.springframework.test.web.servlet.result.FlashAttributeResultMatchers.attribute(java.lang.String,java.lang.Object)='{0}'. Value is '{1}'
#Original text = 
org.springframework.test.web.servlet.result.FlashAttributeResultMatchers.attribute(java.lang.String,org.hamcrest.Matcher<?superT>)='{0}'. Value meets '{1}'
#Original text = 
org.springframework.test.web.servlet.result.FlashAttributeResultMatchers.attributeCount(int)=Count of attributes is {0}
#Original text = 
org.springframework.test.web.servlet.result.FlashAttributeResultMatchers.attributeExists(java.lang.String[])=Attribute(s) {0} exist(s)

######################## org.springframework.test.web.servlet.result.HandlerResultMatchers #
#__________________________________ Methods _______________________________________
#Original text = 
org.springframework.test.web.servlet.result.HandlerResultMatchers.handlerType(java.lang.Class<?>)=Handler type is {0}
#Original text = 
org.springframework.test.web.servlet.result.HandlerResultMatchers.method(java.lang.reflect.Method)=Method is {0}
#Original text = 
org.springframework.test.web.servlet.result.HandlerResultMatchers.methodCall(java.lang.Object)=Method call is '{0}'
#Original text = 
org.springframework.test.web.servlet.result.HandlerResultMatchers.methodName(java.lang.String)=Method name is '{0}'
#Original text = 
org.springframework.test.web.servlet.result.HandlerResultMatchers.methodName(org.hamcrest.Matcher<?superjava.lang.String>)=Method name meets '{0}'

######################## org.springframework.test.web.servlet.result.HeaderResultMatchers #
#__________________________________ Methods _______________________________________
#Original text = 
org.springframework.test.web.servlet.result.HeaderResultMatchers.dateValue(java.lang.String,long)='{0}'. Is a date = '{1}' (Long-number format)
#Original text = 
org.springframework.test.web.servlet.result.HeaderResultMatchers.doesNotExist(java.lang.String)='{0}'. Does not exist
#Original text = 
org.springframework.test.web.servlet.result.HeaderResultMatchers.exists(java.lang.String)='{0}'. Exists
#Original text = 
org.springframework.test.web.servlet.result.HeaderResultMatchers.longValue(java.lang.String,long)='{0}'. Is Long-number = '{1}'
#Original text = 
org.springframework.test.web.servlet.result.HeaderResultMatchers.string(java.lang.String,java.lang.String)='{0}'. Value is '{1}'
#Original text = 
org.springframework.test.web.servlet.result.HeaderResultMatchers.string(java.lang.String,org.hamcrest.Matcher<?superjava.lang.String>)='{0}'. Value meets '{1}'
#Original text = 
org.springframework.test.web.servlet.result.HeaderResultMatchers.stringValues(java.lang.String,java.lang.String[])='{0}'. Value is {1}
#Original text = 
org.springframework.test.web.servlet.result.HeaderResultMatchers.stringValues(java.lang.String,org.hamcrest.Matcher<?superjava.lang.Iterable<java.lang.String>>)='{0}'. Value meets '{1}'

######################## org.springframework.test.web.servlet.result.JsonPathResultMatchers #
#__________________________________ Methods _______________________________________
#Original text = 
org.springframework.test.web.servlet.result.JsonPathResultMatchers.doesNotExist()=Does not exist
#Original text = 
org.springframework.test.web.servlet.result.JsonPathResultMatchers.doesNotHaveJsonPath()=Does not have jsonpath
#Original text = 
org.springframework.test.web.servlet.result.JsonPathResultMatchers.exists()=Exists
#Original text = 
org.springframework.test.web.servlet.result.JsonPathResultMatchers.hasJsonPath()=Has jsonpath
#Original text = 
org.springframework.test.web.servlet.result.JsonPathResultMatchers.isArray()=Value is array
#Original text = 
org.springframework.test.web.servlet.result.JsonPathResultMatchers.isBoolean()=Value is a boolean
#Original text = 
org.springframework.test.web.servlet.result.JsonPathResultMatchers.isEmpty()=Value is empty
#Original text = 
org.springframework.test.web.servlet.result.JsonPathResultMatchers.isMap()=Value is a Map
#Original text = 
org.springframework.test.web.servlet.result.JsonPathResultMatchers.isNotEmpty()=Value is not empty
#Original text = 
org.springframework.test.web.servlet.result.JsonPathResultMatchers.isNumber()=Value is a number
#Original text = 
org.springframework.test.web.servlet.result.JsonPathResultMatchers.isString()=Value is a string
#Original text = 
org.springframework.test.web.servlet.result.JsonPathResultMatchers.value(java.lang.Object)=Value is '{0}'
#Original text = 
org.springframework.test.web.servlet.result.JsonPathResultMatchers.value(org.hamcrest.Matcher<?superT>)=Value meets '{0}'
#Original text = 
org.springframework.test.web.servlet.result.JsonPathResultMatchers.value(org.hamcrest.Matcher<?superT>,java.lang.Class<T>)=Value meets '{0}' as '{1}'
#Original text = 
org.springframework.test.web.servlet.result.JsonPathResultMatchers.prefix(java.lang.String)=Has prefix '{0}'

######################## org.springframework.test.web.servlet.result.ModelResultMatchers #
#__________________________________ Methods _______________________________________
#Original text = 
org.springframework.test.web.servlet.result.ModelResultMatchers.attribute(java.lang.String,java.lang.Object)=Attribute '{0}'. Value is '{1}'
#Original text = 
org.springframework.test.web.servlet.result.ModelResultMatchers.attribute(java.lang.String,org.hamcrest.Matcher<?superT>)=Attribute '{0}'. Value meets '{1}'
#Original text = 
org.springframework.test.web.servlet.result.ModelResultMatchers.attributeDoesNotExist(java.lang.String[])=Attribute(s) {0} do(es) not exist
#Original text = 
org.springframework.test.web.servlet.result.ModelResultMatchers.attributeErrorCount(java.lang.String,int)=Attribute '{0}' has error(s) {1}
#Original text = 
org.springframework.test.web.servlet.result.ModelResultMatchers.attributeExists(java.lang.String[])=Attribute(s) {0} exist(s)
#Original text = 
org.springframework.test.web.servlet.result.ModelResultMatchers.attributeHasErrors(java.lang.String[])=Attribute '{0}' has errors
#Original text = 
org.springframework.test.web.servlet.result.ModelResultMatchers.attributeHasFieldErrorCode(java.lang.String,java.lang.String,java.lang.String)=Attribute '{0}'. Field '{1}'. Error is '{2}'
#Original text = 
org.springframework.test.web.servlet.result.ModelResultMatchers.attributeHasFieldErrorCode(java.lang.String,java.lang.String,org.hamcrest.Matcher<?superjava.lang.String>)=Attribute '{0}'. Field '{1}'. Error meets '{2}'
#Original text = 
org.springframework.test.web.servlet.result.ModelResultMatchers.attributeHasFieldErrors(java.lang.String,java.lang.String[])=Attribute '{0}'. Field(s) {1} has(have) errors
#Original text = 
org.springframework.test.web.servlet.result.ModelResultMatchers.attributeHasNoErrors(java.lang.String[])=Attribute(s) has(have) no errors
#Original text = 
org.springframework.test.web.servlet.result.ModelResultMatchers.errorCount(int)=Error count is {0}
#Original text = 
org.springframework.test.web.servlet.result.ModelResultMatchers.hasErrors()=Has errors
#Original text = 
org.springframework.test.web.servlet.result.ModelResultMatchers.hasNoErrors()=Has no errors
#Original text = 
org.springframework.test.web.servlet.result.ModelResultMatchers.size(int)=Number of model attributes is {0}

######################## org.springframework.test.web.servlet.result.RequestResultMatchers #
#__________________________________ Methods _______________________________________
#Original text = 
org.springframework.test.web.servlet.result.RequestResultMatchers.asyncNotStarted()=Asynchronous processing not started
#Original text = 
org.springframework.test.web.servlet.result.RequestResultMatchers.asyncResult(java.lang.Object)=Result of the asynchronous processing is '{0}'
#Original text = 
org.springframework.test.web.servlet.result.RequestResultMatchers.asyncResult(org.hamcrest.Matcher<?superT>)=Result of the asynchronous processing meets '{0}'
#Original text = 
org.springframework.test.web.servlet.result.RequestResultMatchers.asyncStarted()=Asynchronous processing started
#Original text = 
org.springframework.test.web.servlet.result.RequestResultMatchers.attribute(java.lang.String,java.lang.Object)=Request attribute '{0}' is '{1}'
#Original text = 
org.springframework.test.web.servlet.result.RequestResultMatchers.attribute(java.lang.String,org.hamcrest.Matcher<?superT>)=Request attribute '{0}' meets '{1}'
#Original text = 
org.springframework.test.web.servlet.result.RequestResultMatchers.sessionAttribute(java.lang.String,java.lang.Object)=Session attribute '{0}' is '{1}'
#Original text = 
org.springframework.test.web.servlet.result.RequestResultMatchers.sessionAttribute(java.lang.String,org.hamcrest.Matcher<?superT>)=Session attribute '{0}' meets '{1}'
#Original text = 
org.springframework.test.web.servlet.result.RequestResultMatchers.sessionAttributeDoesNotExist(java.lang.String[])=Session attribute(s) {0} do(es) not exist

######################## org.springframework.test.web.servlet.result.StatusResultMatchers #
#__________________________________ Methods _______________________________________
#Original text = 
org.springframework.test.web.servlet.result.StatusResultMatchers.is(int)=is {0}
#Original text = 
org.springframework.test.web.servlet.result.StatusResultMatchers.is(org.hamcrest.Matcher<?superjava.lang.Integer>)=Meets '{0}'
#Original text = 
org.springframework.test.web.servlet.result.StatusResultMatchers.is1xxInformational()=is informational (1xx)
#Original text = 
org.springframework.test.web.servlet.result.StatusResultMatchers.is2xxSuccessful()=is successful (2xx)
#Original text = 
org.springframework.test.web.servlet.result.StatusResultMatchers.is3xxRedirection()=is redirection (3xx)
#Original text = 
org.springframework.test.web.servlet.result.StatusResultMatchers.is4xxClientError()=is client error (4xx)
#Original text = 
org.springframework.test.web.servlet.result.StatusResultMatchers.is5xxServerError()=is server error (5xx)
#Original text = 
org.springframework.test.web.servlet.result.StatusResultMatchers.isAccepted()=202
#Original text = 
org.springframework.test.web.servlet.result.StatusResultMatchers.isAlreadyReported()=208
#Original text = 
org.springframework.test.web.servlet.result.StatusResultMatchers.isBadGateway()=502
#Original text = 
org.springframework.test.web.servlet.result.StatusResultMatchers.isBadRequest()=400
#Original text = 
org.springframework.test.web.servlet.result.StatusResultMatchers.isBandwidthLimitExceeded()=509
#Original text = 
org.springframework.test.web.servlet.result.StatusResultMatchers.isCheckpoint()=103
#Original text = 
org.springframework.test.web.servlet.result.StatusResultMatchers.isConflict()=409
#Original text = 
org.springframework.test.web.servlet.result.StatusResultMatchers.isContinue()=100
#Original text = 
org.springframework.test.web.servlet.result.StatusResultMatchers.isCreated()=201
#Original text = 
org.springframework.test.web.servlet.result.StatusResultMatchers.isDestinationLocked()=421
#Original text = 
org.springframework.test.web.servlet.result.StatusResultMatchers.isExpectationFailed()=417
#Original text = 
org.springframework.test.web.servlet.result.StatusResultMatchers.isFailedDependency()=424
#Original text = 
org.springframework.test.web.servlet.result.StatusResultMatchers.isForbidden()=403
#Original text = 
org.springframework.test.web.servlet.result.StatusResultMatchers.isFound()=302
#Original text = 
org.springframework.test.web.servlet.result.StatusResultMatchers.isGatewayTimeout()=504
#Original text = 
org.springframework.test.web.servlet.result.StatusResultMatchers.isGone()=410
#Original text = 
org.springframework.test.web.servlet.result.StatusResultMatchers.isHttpVersionNotSupported()=505
#Original text = 
org.springframework.test.web.servlet.result.StatusResultMatchers.isIAmATeapot()=418
#Original text = 
org.springframework.test.web.servlet.result.StatusResultMatchers.isImUsed()=226
#Original text = 
org.springframework.test.web.servlet.result.StatusResultMatchers.isInsufficientSpaceOnResource()=419
#Original text = 
org.springframework.test.web.servlet.result.StatusResultMatchers.isInsufficientStorage()=507
#Original text = 
org.springframework.test.web.servlet.result.StatusResultMatchers.isInternalServerError()=500
#Original text = 
org.springframework.test.web.servlet.result.StatusResultMatchers.isLengthRequired()=411
#Original text = 
org.springframework.test.web.servlet.result.StatusResultMatchers.isLocked()=423
#Original text = 
org.springframework.test.web.servlet.result.StatusResultMatchers.isLoopDetected()=508
#Original text = 
org.springframework.test.web.servlet.result.StatusResultMatchers.isMethodFailure()=420
#Original text = 
org.springframework.test.web.servlet.result.StatusResultMatchers.isMethodNotAllowed()=405
#Original text = 
org.springframework.test.web.servlet.result.StatusResultMatchers.isMovedPermanently()=301
#Original text = 
org.springframework.test.web.servlet.result.StatusResultMatchers.isMovedTemporarily()=302
#Original text = 
org.springframework.test.web.servlet.result.StatusResultMatchers.isMultiStatus()=207
#Original text = 
org.springframework.test.web.servlet.result.StatusResultMatchers.isMultipleChoices()=300
#Original text = 
org.springframework.test.web.servlet.result.StatusResultMatchers.isNetworkAuthenticationRequired()=511
#Original text = 
org.springframework.test.web.servlet.result.StatusResultMatchers.isNoContent()=204
#Original text = 
org.springframework.test.web.servlet.result.StatusResultMatchers.isNonAuthoritativeInformation()=203
#Original text = 
org.springframework.test.web.servlet.result.StatusResultMatchers.isNotAcceptable()=406
#Original text = 
org.springframework.test.web.servlet.result.StatusResultMatchers.isNotExtended()=510
#Original text = 
org.springframework.test.web.servlet.result.StatusResultMatchers.isNotFound()=404
#Original text = 
org.springframework.test.web.servlet.result.StatusResultMatchers.isNotImplemented()=501
#Original text = 
org.springframework.test.web.servlet.result.StatusResultMatchers.isNotModified()=304
#Original text = 
org.springframework.test.web.servlet.result.StatusResultMatchers.isOk()=200
#Original text = 
org.springframework.test.web.servlet.result.StatusResultMatchers.isPartialContent()=206
#Original text = 
org.springframework.test.web.servlet.result.StatusResultMatchers.isPayloadTooLarge()=413
#Original text = 
org.springframework.test.web.servlet.result.StatusResultMatchers.isPaymentRequired()=402
#Original text = 
org.springframework.test.web.servlet.result.StatusResultMatchers.isPermanentRedirect()=308
#Original text = 
org.springframework.test.web.servlet.result.StatusResultMatchers.isPreconditionFailed()=412
#Original text = 
org.springframework.test.web.servlet.result.StatusResultMatchers.isPreconditionRequired()=428
#Original text = 
org.springframework.test.web.servlet.result.StatusResultMatchers.isProcessing()=102
#Original text = 
org.springframework.test.web.servlet.result.StatusResultMatchers.isProxyAuthenticationRequired()=407
#Original text = 
org.springframework.test.web.servlet.result.StatusResultMatchers.isRequestEntityTooLarge()=413
#Original text = 
org.springframework.test.web.servlet.result.StatusResultMatchers.isRequestHeaderFieldsTooLarge()=431
#Original text = 
org.springframework.test.web.servlet.result.StatusResultMatchers.isRequestTimeout()=408
#Original text = 
org.springframework.test.web.servlet.result.StatusResultMatchers.isRequestUriTooLong()=414
#Original text = 
org.springframework.test.web.servlet.result.StatusResultMatchers.isRequestedRangeNotSatisfiable()=416
#Original text = 
org.springframework.test.web.servlet.result.StatusResultMatchers.isResetContent()=205
#Original text = 
org.springframework.test.web.servlet.result.StatusResultMatchers.isSeeOther()=303
#Original text = 
org.springframework.test.web.servlet.result.StatusResultMatchers.isServiceUnavailable()=503
#Original text = 
org.springframework.test.web.servlet.result.StatusResultMatchers.isSwitchingProtocols()=101
#Original text = 
org.springframework.test.web.servlet.result.StatusResultMatchers.isTemporaryRedirect()=307
#Original text = 
org.springframework.test.web.servlet.result.StatusResultMatchers.isTooEarly()=425
#Original text = 
org.springframework.test.web.servlet.result.StatusResultMatchers.isTooManyRequests()=429
#Original text = 
org.springframework.test.web.servlet.result.StatusResultMatchers.isUnauthorized()=401
#Original text = 
org.springframework.test.web.servlet.result.StatusResultMatchers.isUnavailableForLegalReasons()=451
#Original text = 
org.springframework.test.web.servlet.result.StatusResultMatchers.isUnprocessableEntity()=422
#Original text = 
org.springframework.test.web.servlet.result.StatusResultMatchers.isUnsupportedMediaType()=415
#Original text = 
org.springframework.test.web.servlet.result.StatusResultMatchers.isUpgradeRequired()=426
#Original text = 
org.springframework.test.web.servlet.result.StatusResultMatchers.isUriTooLong()=414
#Original text = 
org.springframework.test.web.servlet.result.StatusResultMatchers.isUseProxy()=305
#Original text = 
org.springframework.test.web.servlet.result.StatusResultMatchers.isVariantAlsoNegotiates()=506
#Original text = 
org.springframework.test.web.servlet.result.StatusResultMatchers.reason(java.lang.String)=Reason is '{0}'
#Original text = 
org.springframework.test.web.servlet.result.StatusResultMatchers.reason(org.hamcrest.Matcher<?superjava.lang.String>)=Reason matches '{0}'

######################## org.springframework.test.web.servlet.result.ViewResultMatchers #
#__________________________________ Methods _______________________________________
#Original text = 
org.springframework.test.web.servlet.result.ViewResultMatchers.name(java.lang.String)=Name is '{0}'
#Original text = 
org.springframework.test.web.servlet.result.ViewResultMatchers.name(org.hamcrest.Matcher<?superjava.lang.String>)=Name meets '{0}'

######################## org.springframework.test.web.servlet.result.XpathResultMatchers #
#__________________________________ Methods _______________________________________
#Original text = 
org.springframework.test.web.servlet.result.XpathResultMatchers.booleanValue(java.lang.Boolean)=Is a boolean '{0}'
#Original text = 
org.springframework.test.web.servlet.result.XpathResultMatchers.doesNotExist()=Does not exist
#Original text = 
org.springframework.test.web.servlet.result.XpathResultMatchers.exists()=Exists
#Original text = 
org.springframework.test.web.servlet.result.XpathResultMatchers.node(org.hamcrest.Matcher<?superorg.w3c.dom.Node>)=Node that meets '{0}'
#Original text = 
org.springframework.test.web.servlet.result.XpathResultMatchers.nodeCount(int)=Count of nodes is {0}
#Original text = 
org.springframework.test.web.servlet.result.XpathResultMatchers.nodeCount(org.hamcrest.Matcher<?superjava.lang.Integer>)=Count of nodes meets '{0}'
#Original text = 
org.springframework.test.web.servlet.result.XpathResultMatchers.nodeList(org.hamcrest.Matcher<?superorg.w3c.dom.NodeList>)=List of nodes that meets '{0}'
#Original text = 
org.springframework.test.web.servlet.result.XpathResultMatchers.number(java.lang.Double)=Is a double-number {0}
#Original text = 
org.springframework.test.web.servlet.result.XpathResultMatchers.number(org.hamcrest.Matcher<?superjava.lang.Double>)=Is double-number that meets '{0}'
#Original text = 
org.springframework.test.web.servlet.result.XpathResultMatchers.string(java.lang.String)=Is string '{0}'
#Original text = 
org.springframework.test.web.servlet.result.XpathResultMatchers.string(org.hamcrest.Matcher<?superjava.lang.String>)=Is a string that meets '{0}'