#Values for translation of steps, their parameters, matchers and their descriptions, and attachments are defined here. Format key = value

#============================================ STEPS ============================================ 

######################## spring.mock.mvc.CheckMockMvcExpectation #
#Original text = {description}
spring.mock.mvc.CheckMockMvcExpectation={description}
#_________________________________Parameters_____________________________________
#Original text = Check expectation:
spring.mock.mvc.CheckMockMvcExpectation.imperative=Check expectation:

######################## spring.mock.mvc.GetArrayFromResponse #
#_________________________________Parameters_____________________________________
#Original text = Criteria of an item of resulted array
spring.mock.mvc.GetArrayFromResponse.criteria=Criteria of an item of resulted array
#__________________________________ Methods _______________________________________
#Original text = {description}
spring.mock.mvc.GetArrayFromResponse.array(java.lang.String,core.api.data.format.DataTransformer,com.fasterxml.jackson.core.type.TypeReference<R>,java.util.function.Function<R,T[]>)={description}
#Original text = {description}
spring.mock.mvc.GetArrayFromResponse.array(java.lang.String,core.api.data.format.DataTransformer,java.lang.Class<R>,java.util.function.Function<R,T[]>)={description}

######################## spring.mock.mvc.GetIterableFromResponse #
#_________________________________Parameters_____________________________________
#Original text = Criteria of an item of resulted iterable
spring.mock.mvc.GetIterableFromResponse.criteria=Criteria of an item of resulted iterable
#__________________________________ Methods _______________________________________
#Original text = {description}
spring.mock.mvc.GetIterableFromResponse.iterable(java.lang.String,core.api.data.format.DataTransformer,com.fasterxml.jackson.core.type.TypeReference<R>,java.util.function.Function<R,S>)={description}
#Original text = {description}
spring.mock.mvc.GetIterableFromResponse.iterable(java.lang.String,core.api.data.format.DataTransformer,java.lang.Class<R>,java.util.function.Function<R,S>)={description}

######################## spring.mock.mvc.GetMockMvcResponseResultSupplier #
#Original text = Response
spring.mock.mvc.GetMockMvcResponseResultSupplier=Response
#_________________________________Parameters_____________________________________
#Original text = Retrieve:
spring.mock.mvc.GetMockMvcResponseResultSupplier.imperative=Retrieve:
#Original text = Response is not is as expected:
spring.mock.mvc.GetMockMvcResponseResultSupplier.errorMessageStartingOnEmptyResult=Response is not is as expected:

######################## spring.mock.mvc.GetObjectFromResponseBody #
#_________________________________Parameters_____________________________________
#Original text = Result criteria
spring.mock.mvc.GetObjectFromResponseBody.criteria=Result criteria
#__________________________________ Methods _______________________________________
#Original text = String content of response body
spring.mock.mvc.GetObjectFromResponseBody.contentAsString()=String content of response body
#Original text = {description}
spring.mock.mvc.GetObjectFromResponseBody.objectFromBody(java.lang.String,core.api.data.format.DataTransformer,com.fasterxml.jackson.core.type.TypeReference<R>,java.util.function.Function<R,T>)={description}
#Original text = {description}
spring.mock.mvc.GetObjectFromResponseBody.objectFromBody(java.lang.String,core.api.data.format.DataTransformer,java.lang.Class<R>,java.util.function.Function<R,T>)={description}
#Original text = Response body
spring.mock.mvc.GetObjectFromResponseBody.responseBody(core.api.data.format.DataTransformer,com.fasterxml.jackson.core.type.TypeReference<T>)=Response body
#Original text = Response body
spring.mock.mvc.GetObjectFromResponseBody.responseBody(core.api.data.format.DataTransformer,java.lang.Class<T>)=Response body

######################## spring.mock.mvc.GetObjectFromResponseBodyArray #
#_________________________________Parameters_____________________________________
#Original text = Result criteria
spring.mock.mvc.GetObjectFromResponseBodyArray.criteria=Result criteria
#__________________________________ Methods _______________________________________
#Original text = {description}
spring.mock.mvc.GetObjectFromResponseBodyArray.objectFromArray(java.lang.String,core.api.data.format.DataTransformer,com.fasterxml.jackson.core.type.TypeReference<R>,java.util.function.Function<R,T[]>)={description}
#Original text = {description}
spring.mock.mvc.GetObjectFromResponseBodyArray.objectFromArray(java.lang.String,core.api.data.format.DataTransformer,java.lang.Class<R>,java.util.function.Function<R,T[]>)={description}

######################## spring.mock.mvc.GetObjectFromResponseBodyIterable #
#_________________________________Parameters_____________________________________
#Original text = Result criteria
spring.mock.mvc.GetObjectFromResponseBodyIterable.criteria=Result criteria
#__________________________________ Methods _______________________________________
#Original text = {description}
spring.mock.mvc.GetObjectFromResponseBodyIterable.objectFromIterable(java.lang.String,core.api.data.format.DataTransformer,com.fasterxml.jackson.core.type.TypeReference<R>,java.util.function.Function<R,S>)={description}
#Original text = {description}
spring.mock.mvc.GetObjectFromResponseBodyIterable.objectFromIterable(java.lang.String,core.api.data.format.DataTransformer,java.lang.Class<R>,java.util.function.Function<R,S>)={description}

#============================================ ATTACHMENTS ============================================ 

######################## spring.mock.mvc.captors.RequestBodyStringCaptor #
#Original text = Body of the request
spring.mock.mvc.captors.RequestBodyStringCaptor=Body of the request

######################## spring.mock.mvc.captors.ResponseBodyStringCaptor #
#Original text = Body of the response
spring.mock.mvc.captors.ResponseBodyStringCaptor=Body of the response

######################## spring.mock.mvc.captors.ResponseStringCaptor #
#Original text = Response
spring.mock.mvc.captors.ResponseStringCaptor=Response

#============================================ SPRING RESULT MATCHERS ============================================ 

######################## org.springframework.test.web.servlet.result.MockMvcResultMatchers #
#__________________________________ Methods _______________________________________
#Original text = 
org.springframework.test.web.servlet.result.MockMvcResultMatchers.forwardedUrl(java.lang.String)=
#Original text = 
org.springframework.test.web.servlet.result.MockMvcResultMatchers.forwardedUrlPattern(java.lang.String)=
#Original text = 
org.springframework.test.web.servlet.result.MockMvcResultMatchers.forwardedUrlTemplate(java.lang.String,java.lang.Object[])=
#Original text = 
org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath(java.lang.String,org.hamcrest.Matcher<?superT>)=
#Original text = 
org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath(java.lang.String,org.hamcrest.Matcher<?superT>,java.lang.Class<T>)=
#Original text = 
org.springframework.test.web.servlet.result.MockMvcResultMatchers.redirectedUrl(java.lang.String)=
#Original text = 
org.springframework.test.web.servlet.result.MockMvcResultMatchers.redirectedUrlPattern(java.lang.String)=
#Original text = 
org.springframework.test.web.servlet.result.MockMvcResultMatchers.redirectedUrlTemplate(java.lang.String,java.lang.Object[])=
#Original text = 
org.springframework.test.web.servlet.result.MockMvcResultMatchers.content()=
#Original text = 
org.springframework.test.web.servlet.result.MockMvcResultMatchers.cookie()=
#Original text = 
org.springframework.test.web.servlet.result.MockMvcResultMatchers.flash()=
#Original text = 
org.springframework.test.web.servlet.result.MockMvcResultMatchers.handler()=
#Original text = 
org.springframework.test.web.servlet.result.MockMvcResultMatchers.header()=
#Original text = 
org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath(java.lang.String,java.lang.Object[])=
#Original text = 
org.springframework.test.web.servlet.result.MockMvcResultMatchers.model()=
#Original text = 
org.springframework.test.web.servlet.result.MockMvcResultMatchers.request()=
#Original text = 
org.springframework.test.web.servlet.result.MockMvcResultMatchers.status()=
#Original text = 
org.springframework.test.web.servlet.result.MockMvcResultMatchers.view()=
#Original text = 
org.springframework.test.web.servlet.result.MockMvcResultMatchers.xpath(java.lang.String,java.lang.Object[])=
#Original text = 
org.springframework.test.web.servlet.result.MockMvcResultMatchers.xpath(java.lang.String,java.util.Map<java.lang.String,java.lang.String>,java.lang.Object[])=

######################## org.springframework.test.web.servlet.result.ContentResultMatchers #
#__________________________________ Methods _______________________________________
#Original text = 
org.springframework.test.web.servlet.result.ContentResultMatchers.bytes(byte[])=
#Original text = 
org.springframework.test.web.servlet.result.ContentResultMatchers.contentType(java.lang.String)=
#Original text = 
org.springframework.test.web.servlet.result.ContentResultMatchers.contentType(org.springframework.http.MediaType)=
#Original text = 
org.springframework.test.web.servlet.result.ContentResultMatchers.contentTypeCompatibleWith(java.lang.String)=
#Original text = 
org.springframework.test.web.servlet.result.ContentResultMatchers.contentTypeCompatibleWith(org.springframework.http.MediaType)=
#Original text = 
org.springframework.test.web.servlet.result.ContentResultMatchers.encoding(java.lang.String)=
#Original text = 
org.springframework.test.web.servlet.result.ContentResultMatchers.json(java.lang.String)=
#Original text = 
org.springframework.test.web.servlet.result.ContentResultMatchers.json(java.lang.String,boolean)=
#Original text = 
org.springframework.test.web.servlet.result.ContentResultMatchers.node(org.hamcrest.Matcher<?superorg.w3c.dom.Node>)=
#Original text = 
org.springframework.test.web.servlet.result.ContentResultMatchers.source(org.hamcrest.Matcher<?superjavax.xml.transform.Source>)=
#Original text = 
org.springframework.test.web.servlet.result.ContentResultMatchers.string(java.lang.String)=
#Original text = 
org.springframework.test.web.servlet.result.ContentResultMatchers.string(org.hamcrest.Matcher<?superjava.lang.String>)=
#Original text = 
org.springframework.test.web.servlet.result.ContentResultMatchers.xml(java.lang.String)=

######################## org.springframework.test.web.servlet.result.CookieResultMatchers #
#__________________________________ Methods _______________________________________
#Original text = 
org.springframework.test.web.servlet.result.CookieResultMatchers.comment(java.lang.String,java.lang.String)=
#Original text = 
org.springframework.test.web.servlet.result.CookieResultMatchers.comment(java.lang.String,org.hamcrest.Matcher<?superjava.lang.String>)=
#Original text = 
org.springframework.test.web.servlet.result.CookieResultMatchers.doesNotExist(java.lang.String)=
#Original text = 
org.springframework.test.web.servlet.result.CookieResultMatchers.domain(java.lang.String,java.lang.String)=
#Original text = 
org.springframework.test.web.servlet.result.CookieResultMatchers.domain(java.lang.String,org.hamcrest.Matcher<?superjava.lang.String>)=
#Original text = 
org.springframework.test.web.servlet.result.CookieResultMatchers.exists(java.lang.String)=
#Original text = 
org.springframework.test.web.servlet.result.CookieResultMatchers.httpOnly(java.lang.String,boolean)=
#Original text = 
org.springframework.test.web.servlet.result.CookieResultMatchers.maxAge(java.lang.String,int)=
#Original text = 
org.springframework.test.web.servlet.result.CookieResultMatchers.maxAge(java.lang.String,org.hamcrest.Matcher<?superjava.lang.Integer>)=
#Original text = 
org.springframework.test.web.servlet.result.CookieResultMatchers.path(java.lang.String,java.lang.String)=
#Original text = 
org.springframework.test.web.servlet.result.CookieResultMatchers.path(java.lang.String,org.hamcrest.Matcher<?superjava.lang.String>)=
#Original text = 
org.springframework.test.web.servlet.result.CookieResultMatchers.secure(java.lang.String,boolean)=
#Original text = 
org.springframework.test.web.servlet.result.CookieResultMatchers.value(java.lang.String,java.lang.String)=
#Original text = 
org.springframework.test.web.servlet.result.CookieResultMatchers.value(java.lang.String,org.hamcrest.Matcher<?superjava.lang.String>)=
#Original text = 
org.springframework.test.web.servlet.result.CookieResultMatchers.version(java.lang.String,int)=
#Original text = 
org.springframework.test.web.servlet.result.CookieResultMatchers.version(java.lang.String,org.hamcrest.Matcher<?superjava.lang.Integer>)=

######################## org.springframework.test.web.servlet.result.FlashAttributeResultMatchers #
#__________________________________ Methods _______________________________________
#Original text = 
org.springframework.test.web.servlet.result.FlashAttributeResultMatchers.attribute(java.lang.String,java.lang.Object)=
#Original text = 
org.springframework.test.web.servlet.result.FlashAttributeResultMatchers.attribute(java.lang.String,org.hamcrest.Matcher<?superT>)=
#Original text = 
org.springframework.test.web.servlet.result.FlashAttributeResultMatchers.attributeCount(int)=
#Original text = 
org.springframework.test.web.servlet.result.FlashAttributeResultMatchers.attributeExists(java.lang.String[])=

######################## org.springframework.test.web.servlet.result.HandlerResultMatchers #
#__________________________________ Methods _______________________________________
#Original text = 
org.springframework.test.web.servlet.result.HandlerResultMatchers.handlerType(java.lang.Class<?>)=
#Original text = 
org.springframework.test.web.servlet.result.HandlerResultMatchers.method(java.lang.reflect.Method)=
#Original text = 
org.springframework.test.web.servlet.result.HandlerResultMatchers.methodCall(java.lang.Object)=
#Original text = 
org.springframework.test.web.servlet.result.HandlerResultMatchers.methodName(java.lang.String)=
#Original text = 
org.springframework.test.web.servlet.result.HandlerResultMatchers.methodName(org.hamcrest.Matcher<?superjava.lang.String>)=

######################## org.springframework.test.web.servlet.result.HeaderResultMatchers #
#__________________________________ Methods _______________________________________
#Original text = 
org.springframework.test.web.servlet.result.HeaderResultMatchers.dateValue(java.lang.String,long)=
#Original text = 
org.springframework.test.web.servlet.result.HeaderResultMatchers.doesNotExist(java.lang.String)=
#Original text = 
org.springframework.test.web.servlet.result.HeaderResultMatchers.exists(java.lang.String)=
#Original text = 
org.springframework.test.web.servlet.result.HeaderResultMatchers.longValue(java.lang.String,long)=
#Original text = 
org.springframework.test.web.servlet.result.HeaderResultMatchers.string(java.lang.String,java.lang.String)=
#Original text = 
org.springframework.test.web.servlet.result.HeaderResultMatchers.string(java.lang.String,org.hamcrest.Matcher<?superjava.lang.String>)=
#Original text = 
org.springframework.test.web.servlet.result.HeaderResultMatchers.stringValues(java.lang.String,java.lang.String[])=
#Original text = 
org.springframework.test.web.servlet.result.HeaderResultMatchers.stringValues(java.lang.String,org.hamcrest.Matcher<?superjava.lang.Iterable<java.lang.String>>)=

######################## org.springframework.test.web.servlet.result.JsonPathResultMatchers #
#__________________________________ Methods _______________________________________
#Original text = 
org.springframework.test.web.servlet.result.JsonPathResultMatchers.doesNotExist()=
#Original text = 
org.springframework.test.web.servlet.result.JsonPathResultMatchers.doesNotHaveJsonPath()=
#Original text = 
org.springframework.test.web.servlet.result.JsonPathResultMatchers.exists()=
#Original text = 
org.springframework.test.web.servlet.result.JsonPathResultMatchers.hasJsonPath()=
#Original text = 
org.springframework.test.web.servlet.result.JsonPathResultMatchers.isArray()=
#Original text = 
org.springframework.test.web.servlet.result.JsonPathResultMatchers.isBoolean()=
#Original text = 
org.springframework.test.web.servlet.result.JsonPathResultMatchers.isEmpty()=
#Original text = 
org.springframework.test.web.servlet.result.JsonPathResultMatchers.isMap()=
#Original text = 
org.springframework.test.web.servlet.result.JsonPathResultMatchers.isNotEmpty()=
#Original text = 
org.springframework.test.web.servlet.result.JsonPathResultMatchers.isNumber()=
#Original text = 
org.springframework.test.web.servlet.result.JsonPathResultMatchers.isString()=
#Original text = 
org.springframework.test.web.servlet.result.JsonPathResultMatchers.value(java.lang.Object)=
#Original text = 
org.springframework.test.web.servlet.result.JsonPathResultMatchers.value(org.hamcrest.Matcher<?superT>)=
#Original text = 
org.springframework.test.web.servlet.result.JsonPathResultMatchers.value(org.hamcrest.Matcher<?superT>,java.lang.Class<T>)=
#Original text = 
org.springframework.test.web.servlet.result.JsonPathResultMatchers.prefix(java.lang.String)=

######################## org.springframework.test.web.servlet.result.ModelResultMatchers #
#__________________________________ Methods _______________________________________
#Original text = 
org.springframework.test.web.servlet.result.ModelResultMatchers.attribute(java.lang.String,java.lang.Object)=
#Original text = 
org.springframework.test.web.servlet.result.ModelResultMatchers.attribute(java.lang.String,org.hamcrest.Matcher<?superT>)=
#Original text = 
org.springframework.test.web.servlet.result.ModelResultMatchers.attributeDoesNotExist(java.lang.String[])=
#Original text = 
org.springframework.test.web.servlet.result.ModelResultMatchers.attributeErrorCount(java.lang.String,int)=
#Original text = 
org.springframework.test.web.servlet.result.ModelResultMatchers.attributeExists(java.lang.String[])=
#Original text = 
org.springframework.test.web.servlet.result.ModelResultMatchers.attributeHasErrors(java.lang.String[])=
#Original text = 
org.springframework.test.web.servlet.result.ModelResultMatchers.attributeHasFieldErrorCode(java.lang.String,java.lang.String,java.lang.String)=
#Original text = 
org.springframework.test.web.servlet.result.ModelResultMatchers.attributeHasFieldErrorCode(java.lang.String,java.lang.String,org.hamcrest.Matcher<?superjava.lang.String>)=
#Original text = 
org.springframework.test.web.servlet.result.ModelResultMatchers.attributeHasFieldErrors(java.lang.String,java.lang.String[])=
#Original text = 
org.springframework.test.web.servlet.result.ModelResultMatchers.attributeHasNoErrors(java.lang.String[])=
#Original text = 
org.springframework.test.web.servlet.result.ModelResultMatchers.errorCount(int)=
#Original text = 
org.springframework.test.web.servlet.result.ModelResultMatchers.hasErrors()=
#Original text = 
org.springframework.test.web.servlet.result.ModelResultMatchers.hasNoErrors()=
#Original text = 
org.springframework.test.web.servlet.result.ModelResultMatchers.size(int)=

######################## org.springframework.test.web.servlet.result.RequestResultMatchers #
#__________________________________ Methods _______________________________________
#Original text = 
org.springframework.test.web.servlet.result.RequestResultMatchers.asyncNotStarted()=
#Original text = 
org.springframework.test.web.servlet.result.RequestResultMatchers.asyncResult(java.lang.Object)=
#Original text = 
org.springframework.test.web.servlet.result.RequestResultMatchers.asyncResult(org.hamcrest.Matcher<?superT>)=
#Original text = 
org.springframework.test.web.servlet.result.RequestResultMatchers.asyncStarted()=
#Original text = 
org.springframework.test.web.servlet.result.RequestResultMatchers.attribute(java.lang.String,java.lang.Object)=
#Original text = 
org.springframework.test.web.servlet.result.RequestResultMatchers.attribute(java.lang.String,org.hamcrest.Matcher<?superT>)=
#Original text = 
org.springframework.test.web.servlet.result.RequestResultMatchers.sessionAttribute(java.lang.String,java.lang.Object)=
#Original text = 
org.springframework.test.web.servlet.result.RequestResultMatchers.sessionAttribute(java.lang.String,org.hamcrest.Matcher<?superT>)=
#Original text = 
org.springframework.test.web.servlet.result.RequestResultMatchers.sessionAttributeDoesNotExist(java.lang.String[])=

######################## org.springframework.test.web.servlet.result.StatusResultMatchers #
#__________________________________ Methods _______________________________________
#Original text = 
org.springframework.test.web.servlet.result.StatusResultMatchers.is(int)=
#Original text = 
org.springframework.test.web.servlet.result.StatusResultMatchers.is(org.hamcrest.Matcher<?superjava.lang.Integer>)=
#Original text = 
org.springframework.test.web.servlet.result.StatusResultMatchers.is1xxInformational()=
#Original text = 
org.springframework.test.web.servlet.result.StatusResultMatchers.is2xxSuccessful()=
#Original text = 
org.springframework.test.web.servlet.result.StatusResultMatchers.is3xxRedirection()=
#Original text = 
org.springframework.test.web.servlet.result.StatusResultMatchers.is4xxClientError()=
#Original text = 
org.springframework.test.web.servlet.result.StatusResultMatchers.is5xxServerError()=
#Original text = 
org.springframework.test.web.servlet.result.StatusResultMatchers.isAccepted()=
#Original text = 
org.springframework.test.web.servlet.result.StatusResultMatchers.isAlreadyReported()=
#Original text = 
org.springframework.test.web.servlet.result.StatusResultMatchers.isBadGateway()=
#Original text = 
org.springframework.test.web.servlet.result.StatusResultMatchers.isBadRequest()=
#Original text = 
org.springframework.test.web.servlet.result.StatusResultMatchers.isBandwidthLimitExceeded()=
#Original text = 
org.springframework.test.web.servlet.result.StatusResultMatchers.isCheckpoint()=
#Original text = 
org.springframework.test.web.servlet.result.StatusResultMatchers.isConflict()=
#Original text = 
org.springframework.test.web.servlet.result.StatusResultMatchers.isContinue()=
#Original text = 
org.springframework.test.web.servlet.result.StatusResultMatchers.isCreated()=
#Original text = 
org.springframework.test.web.servlet.result.StatusResultMatchers.isDestinationLocked()=
#Original text = 
org.springframework.test.web.servlet.result.StatusResultMatchers.isExpectationFailed()=
#Original text = 
org.springframework.test.web.servlet.result.StatusResultMatchers.isFailedDependency()=
#Original text = 
org.springframework.test.web.servlet.result.StatusResultMatchers.isForbidden()=
#Original text = 
org.springframework.test.web.servlet.result.StatusResultMatchers.isFound()=
#Original text = 
org.springframework.test.web.servlet.result.StatusResultMatchers.isGatewayTimeout()=
#Original text = 
org.springframework.test.web.servlet.result.StatusResultMatchers.isGone()=
#Original text = 
org.springframework.test.web.servlet.result.StatusResultMatchers.isHttpVersionNotSupported()=
#Original text = 
org.springframework.test.web.servlet.result.StatusResultMatchers.isIAmATeapot()=
#Original text = 
org.springframework.test.web.servlet.result.StatusResultMatchers.isImUsed()=
#Original text = 
org.springframework.test.web.servlet.result.StatusResultMatchers.isInsufficientSpaceOnResource()=
#Original text = 
org.springframework.test.web.servlet.result.StatusResultMatchers.isInsufficientStorage()=
#Original text = 
org.springframework.test.web.servlet.result.StatusResultMatchers.isInternalServerError()=
#Original text = 
org.springframework.test.web.servlet.result.StatusResultMatchers.isLengthRequired()=
#Original text = 
org.springframework.test.web.servlet.result.StatusResultMatchers.isLocked()=
#Original text = 
org.springframework.test.web.servlet.result.StatusResultMatchers.isLoopDetected()=
#Original text = 
org.springframework.test.web.servlet.result.StatusResultMatchers.isMethodFailure()=
#Original text = 
org.springframework.test.web.servlet.result.StatusResultMatchers.isMethodNotAllowed()=
#Original text = 
org.springframework.test.web.servlet.result.StatusResultMatchers.isMovedPermanently()=
#Original text = 
org.springframework.test.web.servlet.result.StatusResultMatchers.isMovedTemporarily()=
#Original text = 
org.springframework.test.web.servlet.result.StatusResultMatchers.isMultiStatus()=
#Original text = 
org.springframework.test.web.servlet.result.StatusResultMatchers.isMultipleChoices()=
#Original text = 
org.springframework.test.web.servlet.result.StatusResultMatchers.isNetworkAuthenticationRequired()=
#Original text = 
org.springframework.test.web.servlet.result.StatusResultMatchers.isNoContent()=
#Original text = 
org.springframework.test.web.servlet.result.StatusResultMatchers.isNonAuthoritativeInformation()=
#Original text = 
org.springframework.test.web.servlet.result.StatusResultMatchers.isNotAcceptable()=
#Original text = 
org.springframework.test.web.servlet.result.StatusResultMatchers.isNotExtended()=
#Original text = 
org.springframework.test.web.servlet.result.StatusResultMatchers.isNotFound()=
#Original text = 
org.springframework.test.web.servlet.result.StatusResultMatchers.isNotImplemented()=
#Original text = 
org.springframework.test.web.servlet.result.StatusResultMatchers.isNotModified()=
#Original text = 
org.springframework.test.web.servlet.result.StatusResultMatchers.isOk()=
#Original text = 
org.springframework.test.web.servlet.result.StatusResultMatchers.isPartialContent()=
#Original text = 
org.springframework.test.web.servlet.result.StatusResultMatchers.isPayloadTooLarge()=
#Original text = 
org.springframework.test.web.servlet.result.StatusResultMatchers.isPaymentRequired()=
#Original text = 
org.springframework.test.web.servlet.result.StatusResultMatchers.isPermanentRedirect()=
#Original text = 
org.springframework.test.web.servlet.result.StatusResultMatchers.isPreconditionFailed()=
#Original text = 
org.springframework.test.web.servlet.result.StatusResultMatchers.isPreconditionRequired()=
#Original text = 
org.springframework.test.web.servlet.result.StatusResultMatchers.isProcessing()=
#Original text = 
org.springframework.test.web.servlet.result.StatusResultMatchers.isProxyAuthenticationRequired()=
#Original text = 
org.springframework.test.web.servlet.result.StatusResultMatchers.isRequestEntityTooLarge()=
#Original text = 
org.springframework.test.web.servlet.result.StatusResultMatchers.isRequestHeaderFieldsTooLarge()=
#Original text = 
org.springframework.test.web.servlet.result.StatusResultMatchers.isRequestTimeout()=
#Original text = 
org.springframework.test.web.servlet.result.StatusResultMatchers.isRequestUriTooLong()=
#Original text = 
org.springframework.test.web.servlet.result.StatusResultMatchers.isRequestedRangeNotSatisfiable()=
#Original text = 
org.springframework.test.web.servlet.result.StatusResultMatchers.isResetContent()=
#Original text = 
org.springframework.test.web.servlet.result.StatusResultMatchers.isSeeOther()=
#Original text = 
org.springframework.test.web.servlet.result.StatusResultMatchers.isServiceUnavailable()=
#Original text = 
org.springframework.test.web.servlet.result.StatusResultMatchers.isSwitchingProtocols()=
#Original text = 
org.springframework.test.web.servlet.result.StatusResultMatchers.isTemporaryRedirect()=
#Original text = 
org.springframework.test.web.servlet.result.StatusResultMatchers.isTooEarly()=
#Original text = 
org.springframework.test.web.servlet.result.StatusResultMatchers.isTooManyRequests()=
#Original text = 
org.springframework.test.web.servlet.result.StatusResultMatchers.isUnauthorized()=
#Original text = 
org.springframework.test.web.servlet.result.StatusResultMatchers.isUnavailableForLegalReasons()=
#Original text = 
org.springframework.test.web.servlet.result.StatusResultMatchers.isUnprocessableEntity()=
#Original text = 
org.springframework.test.web.servlet.result.StatusResultMatchers.isUnsupportedMediaType()=
#Original text = 
org.springframework.test.web.servlet.result.StatusResultMatchers.isUpgradeRequired()=
#Original text = 
org.springframework.test.web.servlet.result.StatusResultMatchers.isUriTooLong()=
#Original text = 
org.springframework.test.web.servlet.result.StatusResultMatchers.isUseProxy()=
#Original text = 
org.springframework.test.web.servlet.result.StatusResultMatchers.isVariantAlsoNegotiates()=
#Original text = 
org.springframework.test.web.servlet.result.StatusResultMatchers.reason(java.lang.String)=
#Original text = 
org.springframework.test.web.servlet.result.StatusResultMatchers.reason(org.hamcrest.Matcher<?superjava.lang.String>)=

######################## org.springframework.test.web.servlet.result.ViewResultMatchers #
#__________________________________ Methods _______________________________________
#Original text = 
org.springframework.test.web.servlet.result.ViewResultMatchers.name(java.lang.String)=
#Original text = 
org.springframework.test.web.servlet.result.ViewResultMatchers.name(org.hamcrest.Matcher<?superjava.lang.String>)=

######################## org.springframework.test.web.servlet.result.XpathResultMatchers #
#__________________________________ Methods _______________________________________
#Original text = 
org.springframework.test.web.servlet.result.XpathResultMatchers.booleanValue(java.lang.Boolean)=
#Original text = 
org.springframework.test.web.servlet.result.XpathResultMatchers.doesNotExist()=
#Original text = 
org.springframework.test.web.servlet.result.XpathResultMatchers.exists()=
#Original text = 
org.springframework.test.web.servlet.result.XpathResultMatchers.node(org.hamcrest.Matcher<?superorg.w3c.dom.Node>)=
#Original text = 
org.springframework.test.web.servlet.result.XpathResultMatchers.nodeCount(int)=
#Original text = 
org.springframework.test.web.servlet.result.XpathResultMatchers.nodeCount(org.hamcrest.Matcher<?superjava.lang.Integer>)=
#Original text = 
org.springframework.test.web.servlet.result.XpathResultMatchers.nodeList(org.hamcrest.Matcher<?superorg.w3c.dom.NodeList>)=
#Original text = 
org.springframework.test.web.servlet.result.XpathResultMatchers.number(java.lang.Double)=
#Original text = 
org.springframework.test.web.servlet.result.XpathResultMatchers.number(org.hamcrest.Matcher<?superjava.lang.Double>)=
#Original text = 
org.springframework.test.web.servlet.result.XpathResultMatchers.string(java.lang.String)=
#Original text = 
org.springframework.test.web.servlet.result.XpathResultMatchers.string(org.hamcrest.Matcher<?superjava.lang.String>)=