#Values for translation of steps, their parameters, matchers and their descriptions, and attachments are defined here. Format key = value

#============================================ SPRING WEB TEST CLIENT CRITERIA ============================================ 

######################## org.springframework.test.web.reactive.server.StatusAssertions #
#__________________________________ Methods _______________________________________
#Original text = 
org.springframework.test.web.reactive.server.StatusAssertions.is1xxInformational()=is informational (1xx)
#Original text = 
org.springframework.test.web.reactive.server.StatusAssertions.is2xxSuccessful()=is successful (2xx)
#Original text = 
org.springframework.test.web.reactive.server.StatusAssertions.is3xxRedirection()=is redirection (3xx)
#Original text = 
org.springframework.test.web.reactive.server.StatusAssertions.is4xxClientError()=is client error (4xx)
#Original text = 
org.springframework.test.web.reactive.server.StatusAssertions.is5xxServerError()=is server error (5xx)
#Original text = 
org.springframework.test.web.reactive.server.StatusAssertions.isAccepted()=202
#Original text = 
org.springframework.test.web.reactive.server.StatusAssertions.isBadRequest()=400
#Original text = 
org.springframework.test.web.reactive.server.StatusAssertions.isCreated()=201
#Original text = 
org.springframework.test.web.reactive.server.StatusAssertions.isEqualTo(int)=is {0}
#Original text = 
org.springframework.test.web.reactive.server.StatusAssertions.isEqualTo(org.springframework.http.HttpStatus)=is {0}
#Original text = 
org.springframework.test.web.reactive.server.StatusAssertions.isForbidden()=403
#Original text = 
org.springframework.test.web.reactive.server.StatusAssertions.isFound()=302
#Original text = 
org.springframework.test.web.reactive.server.StatusAssertions.isNoContent()=204
#Original text = 
org.springframework.test.web.reactive.server.StatusAssertions.isNotFound()=404
#Original text = 
org.springframework.test.web.reactive.server.StatusAssertions.isNotModified()=304
#Original text = 
org.springframework.test.web.reactive.server.StatusAssertions.isOk()=200
#Original text = 
org.springframework.test.web.reactive.server.StatusAssertions.isPermanentRedirect()=308
#Original text = 
org.springframework.test.web.reactive.server.StatusAssertions.isSeeOther()=303
#Original text = 
org.springframework.test.web.reactive.server.StatusAssertions.isTemporaryRedirect()=307
#Original text = 
org.springframework.test.web.reactive.server.StatusAssertions.isUnauthorized()=401
#Original text = 
org.springframework.test.web.reactive.server.StatusAssertions.reasonEquals(java.lang.String)=Reason is '{0}'
#Original text = 
org.springframework.test.web.reactive.server.StatusAssertions.value(java.util.function.Consumer<java.lang.Integer>)={0}
#Original text = 
org.springframework.test.web.reactive.server.StatusAssertions.value(org.hamcrest.Matcher<?superjava.lang.Integer>)=Meets '{0}'

######################## org.springframework.test.web.reactive.server.HeaderAssertions #
#__________________________________ Methods _______________________________________
#Original text = 
org.springframework.test.web.reactive.server.HeaderAssertions.cacheControl(org.springframework.http.CacheControl)=Cache-Control is '{0}'
#Original text = 
org.springframework.test.web.reactive.server.HeaderAssertions.contentDisposition(org.springframework.http.ContentDisposition)=Content-Disposition is'{0}'
#Original text = 
org.springframework.test.web.reactive.server.HeaderAssertions.contentLength(long)=Content-Length is {0}
#Original text = 
org.springframework.test.web.reactive.server.HeaderAssertions.contentType(java.lang.String)=Content-Type is '{0}'
#Original text = 
org.springframework.test.web.reactive.server.HeaderAssertions.contentType(org.springframework.http.MediaType)=Content-Type is '{0}'
#Original text = 
org.springframework.test.web.reactive.server.HeaderAssertions.contentTypeCompatibleWith(java.lang.String)=Content-Type is compatible with '{0}'
#Original text = 
org.springframework.test.web.reactive.server.HeaderAssertions.contentTypeCompatibleWith(org.springframework.http.MediaType)=Content-Type is compatible with '{0}'
#Original text = 
org.springframework.test.web.reactive.server.HeaderAssertions.doesNotExist(java.lang.String)='{0}'. Does not exist
#Original text = 
org.springframework.test.web.reactive.server.HeaderAssertions.exists(java.lang.String)='{0}'. Exists
#Original text = 
org.springframework.test.web.reactive.server.HeaderAssertions.expires(long)=Expires is '{0}' (Date in Long-number format)
#Original text = 
org.springframework.test.web.reactive.server.HeaderAssertions.lastModified(long)=Last-Modified is '{0}' (Date in Long-number format)
#Original text = 
org.springframework.test.web.reactive.server.HeaderAssertions.location(java.lang.String)=Location is '{0}'
#Original text = 
org.springframework.test.web.reactive.server.HeaderAssertions.value(java.lang.String,java.util.function.Consumer<java.lang.String>)='{0}'. Value. {1}
#Original text = 
org.springframework.test.web.reactive.server.HeaderAssertions.value(java.lang.String,org.hamcrest.Matcher<?superjava.lang.String>)='{0}'. Value meets '{1}'
#Original text = 
org.springframework.test.web.reactive.server.HeaderAssertions.valueEquals(java.lang.String,java.lang.String[])='{0}'. Value is {1}
#Original text = 
org.springframework.test.web.reactive.server.HeaderAssertions.valueEquals(java.lang.String,long)='{0}'. Value is {1}
#Original text = 
org.springframework.test.web.reactive.server.HeaderAssertions.valueEqualsDate(java.lang.String,long)='{0}'. Value is {1} (Date in Long-number format)
#Original text = 
org.springframework.test.web.reactive.server.HeaderAssertions.valueMatches(java.lang.String,java.lang.String)='{0}'. Value matches '{1}'
#Original text = 
org.springframework.test.web.reactive.server.HeaderAssertions.values(java.lang.String,java.util.function.Consumer<java.util.List<java.lang.String>>)='{0}'. Values. {1}
#Original text = 
org.springframework.test.web.reactive.server.HeaderAssertions.values(java.lang.String,org.hamcrest.Matcher<?superjava.lang.Iterable<java.lang.String>>)='{0}'. Values meet '{1}'
#Original text = 
org.springframework.test.web.reactive.server.HeaderAssertions.valuesMatch(java.lang.String,java.lang.String[])='{0}'. Values match {1}

######################## org.springframework.test.web.reactive.server.CookieAssertions #
#__________________________________ Methods _______________________________________
#Original text = 
org.springframework.test.web.reactive.server.CookieAssertions.doesNotExist(java.lang.String)='{0}'. Does not exist
#Original text = 
org.springframework.test.web.reactive.server.CookieAssertions.domain(java.lang.String,java.lang.String)='{0}'. Domain is '{1}'
#Original text = 
org.springframework.test.web.reactive.server.CookieAssertions.domain(java.lang.String,org.hamcrest.Matcher<?superjava.lang.String>)='{0}'. Domain meets '{1}'
#Original text = 
org.springframework.test.web.reactive.server.CookieAssertions.exists(java.lang.String)='{0}'. Exists
#Original text = 
org.springframework.test.web.reactive.server.CookieAssertions.httpOnly(java.lang.String,boolean)='{0}'. Http only is '{1}'
#Original text = 
org.springframework.test.web.reactive.server.CookieAssertions.maxAge(java.lang.String,java.time.Duration)='{0}'. Max age is '{1}'
#Original text = 
org.springframework.test.web.reactive.server.CookieAssertions.maxAge(java.lang.String,org.hamcrest.Matcher<?superjava.lang.Long>)='{0}'. Max age meets '{1}'
#Original text = 
org.springframework.test.web.reactive.server.CookieAssertions.path(java.lang.String,java.lang.String)='{0}'. Path is '{1}'
#Original text = 
org.springframework.test.web.reactive.server.CookieAssertions.path(java.lang.String,org.hamcrest.Matcher<?superjava.lang.String>)='{0}'. Path meets '{1}'
#Original text = 
org.springframework.test.web.reactive.server.CookieAssertions.sameSite(java.lang.String,java.lang.String)='{0}'. Same site as '{1}'
#Original text = 
org.springframework.test.web.reactive.server.CookieAssertions.secure(java.lang.String,boolean)='{0}'. Secure is '{1}'
#Original text = 
org.springframework.test.web.reactive.server.CookieAssertions.value(java.lang.String,java.util.function.Consumer<java.lang.String>)='{0}'. Value. {1}
#Original text = 
org.springframework.test.web.reactive.server.CookieAssertions.value(java.lang.String,org.hamcrest.Matcher<?superjava.lang.String>)='{0}'. Value meets '{1}'
#Original text = 
org.springframework.test.web.reactive.server.CookieAssertions.valueEquals(java.lang.String,java.lang.String)='{0}'. Value is '{1}'

######################## org.springframework.test.web.reactive.server.JsonPathAssertions #
#__________________________________ Methods _______________________________________
#Original text = 
org.springframework.test.web.reactive.server.JsonPathAssertions.doesNotExist()=Does not exist
#Original text = 
org.springframework.test.web.reactive.server.JsonPathAssertions.doesNotHaveJsonPath()=Does not have jsonpath
#Original text = 
org.springframework.test.web.reactive.server.JsonPathAssertions.exists()=Exists
#Original text = 
org.springframework.test.web.reactive.server.JsonPathAssertions.hasJsonPath()=Has jsonpath
#Original text = 
org.springframework.test.web.reactive.server.JsonPathAssertions.isArray()=Value is array
#Original text = 
org.springframework.test.web.reactive.server.JsonPathAssertions.isBoolean()=Value is a boolean
#Original text = 
org.springframework.test.web.reactive.server.JsonPathAssertions.isEmpty()=Value is empty
#Original text = 
org.springframework.test.web.reactive.server.JsonPathAssertions.isEqualTo(java.lang.Object)=Value is '{0}'
#Original text = 
org.springframework.test.web.reactive.server.JsonPathAssertions.isMap()=Value is a Map
#Original text = 
org.springframework.test.web.reactive.server.JsonPathAssertions.isNotEmpty()=Value is not empty
#Original text = 
org.springframework.test.web.reactive.server.JsonPathAssertions.isNumber()=Value is a number
#Original text = 
org.springframework.test.web.reactive.server.JsonPathAssertions.value(java.util.function.Consumer<T>)={0}
#Original text = 
org.springframework.test.web.reactive.server.JsonPathAssertions.value(java.util.function.Consumer<T>,java.lang.Class<T>)={0}. Value as instance of '{1}'
#Original text = 
org.springframework.test.web.reactive.server.JsonPathAssertions.value(org.hamcrest.Matcher<?superT>)=Value meets '{0}'
#Original text = 
org.springframework.test.web.reactive.server.JsonPathAssertions.value(org.hamcrest.Matcher<?superT>,java.lang.Class<T>)=Value meets '{0}'. As instance of '{1}'

######################## org.springframework.test.web.reactive.server.XpathAssertions #
#__________________________________ Methods _______________________________________
#Original text = 
org.springframework.test.web.reactive.server.XpathAssertions.doesNotExist()=Does not exist
#Original text = 
org.springframework.test.web.reactive.server.XpathAssertions.exists()=Exists
#Original text = 
org.springframework.test.web.reactive.server.XpathAssertions.isEqualTo(boolean)=Is '{0}'
#Original text = 
org.springframework.test.web.reactive.server.XpathAssertions.isEqualTo(java.lang.Double)=Is {0}
#Original text = 
org.springframework.test.web.reactive.server.XpathAssertions.isEqualTo(java.lang.String)=Is '{0}'
#Original text = 
org.springframework.test.web.reactive.server.XpathAssertions.nodeCount(int)=Count of nodes is {0}
#Original text = 
org.springframework.test.web.reactive.server.XpathAssertions.nodeCount(java.util.function.Consumer<java.lang.Integer>)=Count of nodes. {0}
#Original text = 
org.springframework.test.web.reactive.server.XpathAssertions.nodeCount(org.hamcrest.Matcher<?superjava.lang.Integer>)=Count of nodes meets '{0}'
#Original text = 
org.springframework.test.web.reactive.server.XpathAssertions.number(java.util.function.Consumer<java.lang.Double>)=Number. {0}
#Original text = 
org.springframework.test.web.reactive.server.XpathAssertions.number(org.hamcrest.Matcher<?superjava.lang.Double>)=Number meets '{0}'
#Original text = 
org.springframework.test.web.reactive.server.XpathAssertions.string(java.util.function.Consumer<java.lang.String>)=String. {0}
#Original text = 
org.springframework.test.web.reactive.server.XpathAssertions.string(org.hamcrest.Matcher<?superjava.lang.String>)=String meets '{0}'