#Values for translation of steps, their parameters, matchers and their descriptions, and attachments are defined here. Format key = value

#============================================ STEPS ============================================ 

######################## spring.web.testclient.GetArrayFromResponse #
#_________________________________Parameters_____________________________________
#Original text = Criteria of an item of resulted array
spring.web.testclient.GetArrayFromResponse.criteria=Критерий для каждого элемента, входящего в результат
#__________________________________ Methods _______________________________________
#Original text = {description}
spring.web.testclient.GetArrayFromResponse.array(java.lang.String,spring.web.testclient.FromBodyGet<T[],R>)={description}

######################## spring.web.testclient.GetListFromResponse #
#_________________________________Parameters_____________________________________
#Original text = Criteria of an item of resulted iterable
spring.web.testclient.GetListFromResponse.criteria=Критерий для каждого элемента, входящего в результат
#__________________________________ Methods _______________________________________
#Original text = {description}
spring.web.testclient.GetListFromResponse.list(java.lang.String,spring.web.testclient.FromBodyGet<S,R>)={description}

######################## spring.web.testclient.GetObjectFromResponseBody #
#_________________________________Parameters_____________________________________
#Original text = Result criteria
spring.web.testclient.GetObjectFromResponseBody.criteria=Критерий результата
#__________________________________ Methods _______________________________________
#Original text = {description}
spring.web.testclient.GetObjectFromResponseBody.objectFromBody(java.lang.String,spring.web.testclient.FromBodyGet<T,R>)={description}
#Original text = Response body
spring.web.testclient.GetObjectFromResponseBody.responseBody(spring.web.testclient.FromBodyGet<T,T>)=Тело ответа

######################## spring.web.testclient.GetObjectFromResponseBodyArray #
#_________________________________Parameters_____________________________________
#Original text = Result criteria
spring.web.testclient.GetObjectFromResponseBodyArray.criteria=Критерий результата
#__________________________________ Methods _______________________________________
#Original text = {description}
spring.web.testclient.GetObjectFromResponseBodyArray.objectFromArray(java.lang.String,spring.web.testclient.FromBodyGet<T[],R>)={description}

######################## spring.web.testclient.GetObjectFromResponseBodyIterable #
#_________________________________Parameters_____________________________________
#Original text = Result criteria
spring.web.testclient.GetObjectFromResponseBodyIterable.criteria=Критерий результата
#__________________________________ Methods _______________________________________
#Original text = {description}
spring.web.testclient.GetObjectFromResponseBodyIterable.objectFromIterable(java.lang.String,spring.web.testclient.FromBodyGet<S,R>)={description}

######################## spring.web.testclient.LogWebTestClientExpectation #
#_________________________________Parameters_____________________________________
#Original text = Check expectation:
spring.web.testclient.LogWebTestClientExpectation.imperative=Проверить:
#__________________________________ Methods _______________________________________
#Original text = {description}
spring.web.testclient.LogWebTestClientExpectation.logExpectation(spring.web.testclient.Expectation<T>)={description}

######################## spring.web.testclient.SendRequestAction #
#Original text = Send request and then get response
spring.web.testclient.SendRequestAction=Отправить запрос и получить ответ

#============================================ ATTACHMENTS ============================================ 

######################## spring.web.testclient.captors.RequestExchangeResultCaptor #
#Original text = Request and response
spring.web.testclient.captors.RequestExchangeResultCaptor=Запрос и ответ

#============================================ OTHER ============================================ 

######################## spring.web.testclient.expectation.descriptions.ByteContent #
#Original text = Body byte content
spring.web.testclient.expectation.descriptions.ByteContent=Бинарный контент тела

######################## spring.web.testclient.expectation.descriptions.ExpectAnyBody #
#Original text = Not null or empty body
spring.web.testclient.expectation.descriptions.ExpectAnyBody=Тело ответа не пустое

######################## spring.web.testclient.expectation.descriptions.ExpectEmptyBody #
#Original text = Null or empty body
spring.web.testclient.expectation.descriptions.ExpectEmptyBody=Тело ответа == null или пустое

######################## spring.web.testclient.expectation.descriptions.ExpectJsonPath #
#Original text = Body. Json path '{jsonPath}'. Arguments '{args}'
spring.web.testclient.expectation.descriptions.ExpectJsonPath=Тело ответа. Json path '{jsonPath}'. Аргументы '{args}'

######################## spring.web.testclient.expectation.descriptions.ExpectResponseCookies #
#Original text = Response cookie(s)
spring.web.testclient.expectation.descriptions.ExpectResponseCookies=Куки ответа.

######################## spring.web.testclient.expectation.descriptions.ExpectResponseHeaders #
#Original text = Response header(s)
spring.web.testclient.expectation.descriptions.ExpectResponseHeaders=Заголовок(ки) ответа

######################## spring.web.testclient.expectation.descriptions.ExpectResponseStatus #
#Original text = Response status
spring.web.testclient.expectation.descriptions.ExpectResponseStatus=Статус ответа

######################## spring.web.testclient.expectation.descriptions.ExpectXpath #
#Original text = Body. Xpath '{xPath}'. Namespaces '{nameSpaces}'. Arguments '{args}'
spring.web.testclient.expectation.descriptions.ExpectXpath=Тело ответа. Xpath '{xPath}'. Неймспейсы '{nameSpaces}'. Аргументы '{args}'

######################## spring.web.testclient.expectation.descriptions.ExpectedBodyJson #
#Original text = Body as json-string is equal to or contains same key-value pairs as '{json}'
spring.web.testclient.expectation.descriptions.ExpectedBodyJson=json-строка тела ответа равна или содержит те же пары ключ-значение, что и '{json}'

######################## spring.web.testclient.expectation.descriptions.ExpectedBodyListOfClass #
#Original text = Non null list body. Class of list item '{class}'
spring.web.testclient.expectation.descriptions.ExpectedBodyListOfClass=Тело ответа - лист элементов класса '{class}'

######################## spring.web.testclient.expectation.descriptions.ExpectedBodyListOfType #
#Original text = Non null list body. Type of list item '{type}'
spring.web.testclient.expectation.descriptions.ExpectedBodyListOfType=Тело ответа - лист элементов типа '{type}'

######################## spring.web.testclient.expectation.descriptions.ExpectedBodyOfClass #
#Original text = Non null body. Class '{class}'
spring.web.testclient.expectation.descriptions.ExpectedBodyOfClass=Тело ответа - объект класса '{class}'

######################## spring.web.testclient.expectation.descriptions.ExpectedBodyOfType #
#Original text = Non null body. Type '{type}'
spring.web.testclient.expectation.descriptions.ExpectedBodyOfType=Тело ответа - объект типа '{type}'

######################## spring.web.testclient.expectation.descriptions.ExpectedBodyXml #
#Original text = Body as xml-string is equal to or contains same elements as '{xml}'
spring.web.testclient.expectation.descriptions.ExpectedBodyXml=xml-string тела ответа равна или содержит те же элементы, что и '{xml}'

######################## spring.web.testclient.expectation.descriptions.StringContent #
#Original text = Body string content
spring.web.testclient.expectation.descriptions.StringContent=Текстовый контент тела

#============================================ SPRING WEB TEST CLIENT CRITERIA ============================================ 

######################## org.springframework.test.web.reactive.server.StatusAssertions #
#__________________________________ Methods _______________________________________
#Original text = 
org.springframework.test.web.reactive.server.StatusAssertions.is1xxInformational()=Информационный (1xx)
#Original text = 
org.springframework.test.web.reactive.server.StatusAssertions.is2xxSuccessful()=Успешный (2xx)
#Original text = 
org.springframework.test.web.reactive.server.StatusAssertions.is3xxRedirection()=Редирект (3xx)
#Original text = 
org.springframework.test.web.reactive.server.StatusAssertions.is4xxClientError()=Ошибка клиента (4xx)
#Original text = 
org.springframework.test.web.reactive.server.StatusAssertions.is5xxServerError()=Ошибка сервера (5xx)
#Original text = 
org.springframework.test.web.reactive.server.StatusAssertions.isAccepted()=202
#Original text = 
org.springframework.test.web.reactive.server.StatusAssertions.isBadRequest()=400
#Original text = 
org.springframework.test.web.reactive.server.StatusAssertions.isCreated()=201
#Original text = 
org.springframework.test.web.reactive.server.StatusAssertions.isEqualTo(int)=is {0}
#Original text = 
org.springframework.test.web.reactive.server.StatusAssertions.isEqualTo(org.springframework.http.HttpStatus)={0}
#Original text = 
org.springframework.test.web.reactive.server.StatusAssertions.isForbidden()=403
#Original text = 
org.springframework.test.web.reactive.server.StatusAssertions.isFound()=302
#Original text = 
org.springframework.test.web.reactive.server.StatusAssertions.isNoContent()=204
#Original text = 
org.springframework.test.web.reactive.server.StatusAssertions.isNotFound()=404
#Original text = 
org.springframework.test.web.reactive.server.StatusAssertions.isNotModified()=304
#Original text = 
org.springframework.test.web.reactive.server.StatusAssertions.isOk()=200
#Original text = 
org.springframework.test.web.reactive.server.StatusAssertions.isPermanentRedirect()=308
#Original text = 
org.springframework.test.web.reactive.server.StatusAssertions.isSeeOther()=303
#Original text = 
org.springframework.test.web.reactive.server.StatusAssertions.isTemporaryRedirect()=307
#Original text = 
org.springframework.test.web.reactive.server.StatusAssertions.isUnauthorized()=401
#Original text = 
org.springframework.test.web.reactive.server.StatusAssertions.reasonEquals(java.lang.String)=Причина '{0}'
#Original text = 
org.springframework.test.web.reactive.server.StatusAssertions.value(java.util.function.Consumer<java.lang.Integer>)={0}
#Original text = 
org.springframework.test.web.reactive.server.StatusAssertions.value(org.hamcrest.Matcher<?superjava.lang.Integer>)=Соответствует '{0}'

######################## org.springframework.test.web.reactive.server.HeaderAssertions #
#__________________________________ Methods _______________________________________
#Original text = 
org.springframework.test.web.reactive.server.HeaderAssertions.cacheControl(org.springframework.http.CacheControl)=Cache-Control '{0}'
#Original text = 
org.springframework.test.web.reactive.server.HeaderAssertions.contentDisposition(org.springframework.http.ContentDisposition)=Content-Disposition '{0}'
#Original text = 
org.springframework.test.web.reactive.server.HeaderAssertions.contentLength(long)=Content-Length {0}
#Original text = 
org.springframework.test.web.reactive.server.HeaderAssertions.contentType(java.lang.String)=Content-Type '{0}'
#Original text = 
org.springframework.test.web.reactive.server.HeaderAssertions.contentType(org.springframework.http.MediaType)=Content-Type '{0}'
#Original text = 
org.springframework.test.web.reactive.server.HeaderAssertions.contentTypeCompatibleWith(java.lang.String)=Content-Type совместим с '{0}'
#Original text = 
org.springframework.test.web.reactive.server.HeaderAssertions.contentTypeCompatibleWith(org.springframework.http.MediaType)=Content-Type совместим с '{0}'
#Original text = 
org.springframework.test.web.reactive.server.HeaderAssertions.doesNotExist(java.lang.String)='{0}'. Не существует
#Original text = 
org.springframework.test.web.reactive.server.HeaderAssertions.exists(java.lang.String)='{0}'. Существует
#Original text = 
org.springframework.test.web.reactive.server.HeaderAssertions.expires(long)=Expires '{0}' (дата в формате Long-числа)
#Original text = 
org.springframework.test.web.reactive.server.HeaderAssertions.lastModified(long)=Last-Modified '{0}' (дата в формате Long-числа)
#Original text = 
org.springframework.test.web.reactive.server.HeaderAssertions.location(java.lang.String)=Location '{0}'
#Original text = 
org.springframework.test.web.reactive.server.HeaderAssertions.value(java.lang.String,java.util.function.Consumer<java.lang.String>)='{0}'. Значение. {1}
#Original text = 
org.springframework.test.web.reactive.server.HeaderAssertions.value(java.lang.String,org.hamcrest.Matcher<?superjava.lang.String>)='{0}'. Значение соответствует '{1}'
#Original text = 
org.springframework.test.web.reactive.server.HeaderAssertions.valueEquals(java.lang.String,java.lang.String[])='{0}'. Значение {1}
#Original text = 
org.springframework.test.web.reactive.server.HeaderAssertions.valueEquals(java.lang.String,long)='{0}'. Значение {1}
#Original text = 
org.springframework.test.web.reactive.server.HeaderAssertions.valueEqualsDate(java.lang.String,long)='{0}'. Значение {1} (дата в формате Long-числа)
#Original text = 
org.springframework.test.web.reactive.server.HeaderAssertions.valueMatches(java.lang.String,java.lang.String)='{0}'. Значение соответствует '{1}'
#Original text = 
org.springframework.test.web.reactive.server.HeaderAssertions.values(java.lang.String,java.util.function.Consumer<java.util.List<java.lang.String>>)='{0}'. Значения. {1}
#Original text = 
org.springframework.test.web.reactive.server.HeaderAssertions.values(java.lang.String,org.hamcrest.Matcher<?superjava.lang.Iterable<java.lang.String>>)='{0}'. Значения соответствуют '{1}'
#Original text = 
org.springframework.test.web.reactive.server.HeaderAssertions.valuesMatch(java.lang.String,java.lang.String[])='{0}'. Значения соответствуют {1}

######################## org.springframework.test.web.reactive.server.CookieAssertions #
#__________________________________ Methods _______________________________________
#Original text = 
org.springframework.test.web.reactive.server.CookieAssertions.doesNotExist(java.lang.String)='{0}'. Не существует
#Original text = 
org.springframework.test.web.reactive.server.CookieAssertions.domain(java.lang.String,java.lang.String)='{0}'. Домен '{1}'
#Original text = 
org.springframework.test.web.reactive.server.CookieAssertions.domain(java.lang.String,org.hamcrest.Matcher<?superjava.lang.String>)='{0}'. Домен соответствует '{1}'
#Original text = 
org.springframework.test.web.reactive.server.CookieAssertions.exists(java.lang.String)='{0}'. Существует
#Original text = 
org.springframework.test.web.reactive.server.CookieAssertions.httpOnly(java.lang.String,boolean)='{0}'. Http only=='{1}'
#Original text = 
org.springframework.test.web.reactive.server.CookieAssertions.maxAge(java.lang.String,java.time.Duration)='{0}'. Срок '{1}'
#Original text = 
org.springframework.test.web.reactive.server.CookieAssertions.maxAge(java.lang.String,org.hamcrest.Matcher<?superjava.lang.Long>)='{0}'. Срок соответствует '{1}'
#Original text = 
org.springframework.test.web.reactive.server.CookieAssertions.path(java.lang.String,java.lang.String)='{0}'. Path=='{1}'
#Original text = 
org.springframework.test.web.reactive.server.CookieAssertions.path(java.lang.String,org.hamcrest.Matcher<?superjava.lang.String>)='{0}'. Path соответствует '{1}'
#Original text = 
org.springframework.test.web.reactive.server.CookieAssertions.sameSite(java.lang.String,java.lang.String)='{0}'. Тот же сайт что и '{1}'
#Original text = 
org.springframework.test.web.reactive.server.CookieAssertions.secure(java.lang.String,boolean)='{0}'. Secure=='{1}'
#Original text = 
org.springframework.test.web.reactive.server.CookieAssertions.value(java.lang.String,java.util.function.Consumer<java.lang.String>)='{0}'. Значение. {1}
#Original text = 
org.springframework.test.web.reactive.server.CookieAssertions.value(java.lang.String,org.hamcrest.Matcher<?superjava.lang.String>)='{0}'. Значение соответствует '{1}'
#Original text = 
org.springframework.test.web.reactive.server.CookieAssertions.valueEquals(java.lang.String,java.lang.String)='{0}'. Значение '{1}'

######################## org.springframework.test.web.reactive.server.JsonPathAssertions #
#__________________________________ Methods _______________________________________
#Original text = 
org.springframework.test.web.reactive.server.JsonPathAssertions.doesNotExist()=Не существует
#Original text = 
org.springframework.test.web.reactive.server.JsonPathAssertions.doesNotHaveJsonPath()=Не имеет jsonpath
#Original text = 
org.springframework.test.web.reactive.server.JsonPathAssertions.exists()=Существует
#Original text = 
org.springframework.test.web.reactive.server.JsonPathAssertions.hasJsonPath()=Имеет jsonpath
#Original text = 
org.springframework.test.web.reactive.server.JsonPathAssertions.isArray()=Массив
#Original text = 
org.springframework.test.web.reactive.server.JsonPathAssertions.isBoolean()=Булево
#Original text = 
org.springframework.test.web.reactive.server.JsonPathAssertions.isEmpty()=Значение пустое
#Original text = 
org.springframework.test.web.reactive.server.JsonPathAssertions.isEqualTo(java.lang.Object)=Значение '{0}'
#Original text = 
org.springframework.test.web.reactive.server.JsonPathAssertions.isMap()=Map
#Original text = 
org.springframework.test.web.reactive.server.JsonPathAssertions.isNotEmpty()=Значение не пустое
#Original text = 
org.springframework.test.web.reactive.server.JsonPathAssertions.isNumber()=Значение число
#Original text = 
org.springframework.test.web.reactive.server.JsonPathAssertions.value(java.util.function.Consumer<T>)={0}
#Original text = 
org.springframework.test.web.reactive.server.JsonPathAssertions.value(java.util.function.Consumer<T>,java.lang.Class<T>)={0}. Значение как объект '{1}'
#Original text = 
org.springframework.test.web.reactive.server.JsonPathAssertions.value(org.hamcrest.Matcher<?superT>)=Значение соответствует '{0}'
#Original text = 
org.springframework.test.web.reactive.server.JsonPathAssertions.value(org.hamcrest.Matcher<?superT>,java.lang.Class<T>)=Значение соответствует '{0}'. Значение как объект '{1}'

######################## org.springframework.test.web.reactive.server.XpathAssertions #
#__________________________________ Methods _______________________________________
#Original text = 
org.springframework.test.web.reactive.server.XpathAssertions.doesNotExist()=Не существует
#Original text = 
org.springframework.test.web.reactive.server.XpathAssertions.exists()=Существует
#Original text = 
org.springframework.test.web.reactive.server.XpathAssertions.isEqualTo(boolean)='{0}'
#Original text = 
org.springframework.test.web.reactive.server.XpathAssertions.isEqualTo(java.lang.Double)={0}
#Original text = 
org.springframework.test.web.reactive.server.XpathAssertions.isEqualTo(java.lang.String)='{0}'
#Original text = 
org.springframework.test.web.reactive.server.XpathAssertions.nodeCount(int)=Число нод {0}
#Original text = 
org.springframework.test.web.reactive.server.XpathAssertions.nodeCount(java.util.function.Consumer<java.lang.Integer>)=Число нод. {0}
#Original text = 
org.springframework.test.web.reactive.server.XpathAssertions.nodeCount(org.hamcrest.Matcher<?superjava.lang.Integer>)=Число нод соответствует '{0}'
#Original text = 
org.springframework.test.web.reactive.server.XpathAssertions.number(java.util.function.Consumer<java.lang.Double>)=Число. {0}
#Original text = 
org.springframework.test.web.reactive.server.XpathAssertions.number(org.hamcrest.Matcher<?superjava.lang.Double>)=Число, соответствующее '{0}'
#Original text = 
org.springframework.test.web.reactive.server.XpathAssertions.string(java.util.function.Consumer<java.lang.String>)=Строка. {0}
#Original text = 
org.springframework.test.web.reactive.server.XpathAssertions.string(org.hamcrest.Matcher<?superjava.lang.String>)=Строка, соответствующая '{0}'